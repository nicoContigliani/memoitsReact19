{
    "tecnology": [
        {
            "react": {
                "basic": [
                    {
                        "ask": "¿Qué es un componente en React?",
                        "options": [
                            "Una función de JavaScript",
                            "Un archivo CSS",
                            "Una base de datos"
                        ],
                        "answer": "Una función de JavaScript",
                        "images": "https://example.com/react-component.png",
                        "information": "Un componente en React es simplemente una función de JavaScript que retorna JSX para renderizar contenido en la interfaz de usuario."
                    },
                    {
                        "ask": "¿Qué es el estado (state) en React?",
                        "options": [
                            "Un componente de React",
                            "Un objeto JavaScript",
                            "Una variable global"
                        ],
                        "answer": "Un objeto JavaScript",
                        "images": "https://example.com/react-state.png",
                        "information": "El estado (state) en React es un objeto JavaScript que contiene datos dinámicos y afecta la representación de los componentes y su renderizado."
                    },
                    {
                        "ask": "¿Cómo se llama la función utilizada para renderizar un componente en React?",
                        "options": [
                            "renderComponent()",
                            "loadComponent()",
                            "ReactDOM.render()"
                        ],
                        "answer": "ReactDOM.render()",
                        "images": "https://example.com/react-render.png",
                        "information": "ReactDOM.render() es la función principal utilizada para renderizar un componente de React en el DOM del navegador."
                    },
                    {
                        "ask": "¿Qué hook de React se utiliza para realizar efectos secundarios después de renderizar?",
                        "options": [
                            "useEffect",
                            "useState",
                            "useContext"
                        ],
                        "answer": "useEffect",
                        "images": "https://example.com/react-useEffect.png",
                        "information": "useEffect es un hook de React que permite realizar efectos secundarios después de que el componente se haya renderizado en el DOM."
                    },
                    {
                        "ask": "¿Qué se utiliza para manejar eventos como clics o cambios de estado en React?",
                        "options": [
                            "EventListeners",
                            "setState()",
                            "useEffect()"
                        ],
                        "answer": "setState()",
                        "images": "https://example.com/react-setState.png",
                        "information": "setState() es un método que se utiliza para actualizar el estado de un componente y re-renderizar la interfaz de usuario en React."
                    },
                    {
                        "ask": "¿Qué método se utiliza para definir un estado inicial en un componente de clase en React?",
                        "options": [
                            "constructor()",
                            "componentDidMount()",
                            "setState()"
                        ],
                        "answer": "constructor()",
                        "images": "https://example.com/react-constructor.png",
                        "information": "El método constructor() se utiliza para inicializar el estado y otras configuraciones iniciales en un componente de clase en React."
                    },
                    {
                        "ask": "¿Cuál es el propósito del método componentDidMount() en un componente de clase en React?",
                        "options": [
                            "Actualizar el estado del componente",
                            "Renderizar el componente en el DOM",
                            "Realizar acciones después de que el componente haya sido montado"
                        ],
                        "answer": "Realizar acciones después de que el componente haya sido montado",
                        "images": "https://example.com/react-componentDidMount.png",
                        "information": "componentDidMount() es un método de ciclo de vida en React que se llama después de que el componente ha sido montado en el DOM, permitiendo realizar acciones como llamadas a API."
                    },
                    {
                        "ask": "¿Cómo se llama la función que permite pasar datos de un componente a otro en React?",
                        "options": [
                            "sendData()",
                            "transferProps()",
                            "props"
                        ],
                        "answer": "props",
                        "images": "https://example.com/react-props.png",
                        "information": "props es una propiedad especial en React que permite pasar datos (propiedades) de un componente padre a un componente hijo."
                    },
                    {
                        "ask": "¿Qué hook de React se utiliza para manejar el estado en componentes funcionales?",
                        "options": [
                            "useState()",
                            "useEffect()",
                            "useContext()"
                        ],
                        "answer": "useState()",
                        "images": "https://example.com/react-useState.png",
                        "information": "useState() es un hook de React que permite añadir estado a componentes funcionales, reemplazando la necesidad de utilizar clases para manejar el estado."
                    },
                    {
                        "ask": "¿Cuál es la biblioteca utilizada para hacer llamadas AJAX en React?",
                        "options": [
                            "jQuery",
                            "Axios",
                            "Fetch"
                        ],
                        "answer": "Axios",
                        "images": "https://example.com/react-axios.png",
                        "information": "Axios es una biblioteca popular en JavaScript utilizada para hacer peticiones HTTP y AJAX, muy comúnmente utilizada en aplicaciones React."
                    },
                    {
                        "ask": "¿Qué método se utiliza para actualizar el estado de un componente en React?",
                        "options": [
                            "updateState()",
                            "setState()",
                            "modifyState()"
                        ],
                        "answer": "setState()",
                        "images": "https://example.com/react-setState.png",
                        "information": "setState() es el método utilizado para actualizar el estado de un componente en React, permitiendo que la interfaz de usuario responda a eventos y datos."
                    },
                    {
                        "ask": "¿Qué hook de React se utiliza para realizar efectos secundarios en componentes funcionales?",
                        "options": [
                            "useEffect()",
                            "useState()",
                            "useContext()"
                        ],
                        "answer": "useEffect()",
                        "images": "https://example.com/react-useEffect.png",
                        "information": "useEffect() es un hook de React que permite realizar efectos secundarios en componentes funcionales, como la suscripción a datos externos o el manejo de eventos DOM."
                    },
                    {
                        "ask": "¿Cuál es la herramienta recomendada para la gestión del estado global en aplicaciones React?",
                        "options": [
                            "Context API",
                            "Redux",
                            "Axios"
                        ],
                        "answer": "Redux",
                        "images": "https://example.com/react-redux.png",
                        "information": "Redux es una biblioteca para manejar el estado global en aplicaciones JavaScript, ampliamente utilizada junto con React para mantener un estado predecible en toda la aplicación."
                    },
                    {
                        "ask": "¿Qué método se utiliza para manejar eventos en React?",
                        "options": [
                            "eventHandlers()",
                            "handleEvent()",
                            "onClick()"
                        ],
                        "answer": "onClick()",
                        "images": "https://example.com/react-onClick.png",
                        "information": "onClick() es un atributo de JSX utilizado en React para manejar eventos, como hacer clic en un elemento, desencadenando funciones o actualizando el estado del componente."
                    },
                    {
                        "ask": "¿Cómo se llama la función que permite renderizar varios elementos en React sin la necesidad de envolverlos en un div adicional?",
                        "options": [
                            "Fragment",
                            "Wrapper",
                            "Component"
                        ],
                        "answer": "Fragment",
                        "images": "https://example.com/react-fragment.png",
                        "information": "Fragment es una característica de React que permite agrupar múltiples elementos hijos sin agregar nodos adicionales al DOM, útil para renderizar listas o componentes."
                    },
                    {
                        "ask": "¿Qué método se utiliza para actualizar el estado de un componente en React?",
                        "options": [
                            "updateState()",
                            "setState()",
                            "modifyState()"
                        ],
                        "answer": "setState()",
                        "images": "https://example.com/react-setState.png",
                        "information": "setState() es el método utilizado para actualizar el estado de un componente en React, permitiendo que la interfaz de usuario responda a eventos y datos."
                    },
                    {
                        "ask": "¿Qué hook de React se utiliza para realizar efectos secundarios en componentes funcionales?",
                        "options": [
                            "useEffect()",
                            "useState()",
                            "useContext()"
                        ],
                        "answer": "useEffect()",
                        "images": "https://example.com/react-useEffect.png",
                        "information": "useEffect() es un hook de React que permite realizar efectos secundarios en componentes funcionales, como la suscripción a datos externos o el manejo de eventos DOM."
                    },
                    {
                        "ask": "¿Cuál es la herramienta recomendada para la gestión del estado global en aplicaciones React?",
                        "options": [
                            "Context API",
                            "Redux",
                            "Axios"
                        ],
                        "answer": "Redux",
                        "images": "https://example.com/react-redux.png",
                        "information": "Redux es una biblioteca para manejar el estado global en aplicaciones JavaScript, ampliamente utilizada junto con React para mantener un estado predecible en toda la aplicación."
                    },
                    {
                        "ask": "¿Qué método se utiliza para manejar eventos en React?",
                        "options": [
                            "eventHandlers()",
                            "handleEvent()",
                            "onClick()"
                        ],
                        "answer": "onClick()",
                        "images": "https://example.com/react-onClick.png",
                        "information": "onClick() es un atributo de JSX utilizado en React para manejar eventos, como hacer clic en un elemento, desencadenando funciones o actualizando el estado del componente."
                    },
                    {
                        "ask": "¿Cómo se llama la función que permite renderizar varios elementos en React sin la necesidad de envolverlos en un div adicional?",
                        "options": [
                            "Fragment",
                            "Wrapper",
                            "Component"
                        ],
                        "answer": "Fragment",
                        "images": "https://example.com/react-fragment.png",
                        "information": "Fragment es una característica de React que permite agrupar múltiples elementos hijos sin agregar nodos adicionales al DOM, útil para renderizar listas o componentes."
                    },
                    {
                        "ask": "¿Qué método se utiliza para pasar datos de un componente padre a un componente hijo en React?",
                        "options": [
                            "setData()",
                            "props",
                            "setState()"
                        ],
                        "answer": "props",
                        "images": "https://example.com/react-props.png",
                        "information": "En React, los datos se pasan de un componente padre a un componente hijo a través de props (propiedades), que son objetos JavaScript utilizados para pasar datos de solo lectura entre componentes."
                    },
                    {
                        "ask": "¿Qué método se utiliza para eliminar un componente de la jerarquía en React?",
                        "options": [
                            "removeComponent()",
                            "deleteComponent()",
                            "unmountComponent()"
                        ],
                        "answer": "unmountComponent()",
                        "images": "https://example.com/react-unmount.png",
                        "information": "Para eliminar un componente de la jerarquía de React, se utiliza el método unmountComponent(), que desmonta y destruye el componente, liberando los recursos asociados."
                    },
                    {
                        "ask": "¿Qué ciclo de vida de un componente de clase se utiliza para realizar operaciones después de que el componente se haya renderizado?",
                        "options": [
                            "componentDidMount()",
                            "componentWillUnmount()",
                            "rendered()"
                        ],
                        "answer": "componentDidMount()",
                        "images": "https://example.com/react-componentDidMount.png",
                        "information": "componentDidMount() es un método del ciclo de vida de un componente de clase en React que se ejecuta después de que el componente se haya renderizado en el DOM, utilizado para realizar operaciones como llamadas a API o suscripciones."
                    },
                    {
                        "ask": "¿Cuál es la función utilizada para iterar sobre elementos de una lista en JSX en React?",
                        "options": [
                            "forEach()",
                            "map()",
                            "loop()"
                        ],
                        "answer": "map()",
                        "images": "https://example.com/react-map.png",
                        "information": "En JSX de React, la función utilizada para iterar sobre elementos de una lista y generar elementos React es map(), que devuelve una lista de elementos React basada en una lista original."
                    },
                    {
                        "ask": "¿Cómo se llama la función utilizada para manejar errores en componentes de React?",
                        "options": [
                            "handleErrors()",
                            "errorHandler()",
                            "componentDidCatch()"
                        ],
                        "answer": "componentDidCatch()",
                        "images": "https://example.com/react-componentDidCatch.png",
                        "information": "componentDidCatch() es un método del ciclo de vida de un componente de clase en React utilizado para manejar errores generados por componentes secundarios, permitiendo que la aplicación maneje errores y muestre una interfaz de usuario adecuada."
                    },
                    {
                        "ask": "¿Qué método se utiliza para actualizar el estado en un componente de React?",
                        "options": [
                          "updateState()",
                          "setState()",
                          "modifyState()"
                        ],
                        "answer": "setState()",
                        "images": "https://example.com/react-setState.png",
                        "information": "setState() es el método utilizado en React para actualizar el estado de un componente, permitiendo re-renderizar el componente con los nuevos datos."
                      },
                      {
                        "ask": "¿Qué hook de React se utiliza para realizar efectos secundarios después de que el componente se haya renderizado?",
                        "options": [
                          "useEffect()",
                          "useEffectAfter()",
                          "afterEffect()"
                        ],
                        "answer": "useEffect()",
                        "images": "https://example.com/react-useEffect.png",
                        "information": "useEffect() es un hook de React utilizado para realizar efectos secundarios después de que el componente se haya renderizado, como peticiones HTTP, suscripciones a eventos o limpieza de recursos."
                      },
                      {
                        "ask": "¿Qué método se utiliza para manejar eventos de clic en React?",
                        "options": [
                          "handleEvent()",
                          "onClick()",
                          "eventHandler()"
                        ],
                        "answer": "onClick()",
                        "images": "https://example.com/react-onClick.png",
                        "information": "onClick() es el método utilizado en React para manejar eventos de clic, permitiendo a los componentes responder a las interacciones del usuario y ejecutar acciones específicas."
                      },
                      {
                        "ask": "¿Cuál es la forma correcta de definir un componente funcional en React?",
                        "options": [
                          "function MyComponent() {}",
                          "class MyComponent {}",
                          "const MyComponent = () => {}"
                        ],
                        "answer": "const MyComponent = () => {}",
                        "images": "https://example.com/react-functional-component.png",
                        "information": "La forma correcta de definir un componente funcional en React es utilizando la sintaxis 'const MyComponent = () => {}', que permite crear componentes basados en funciones con estado y props."
                      },
                      {
                        "ask": "¿Qué hook de React se utiliza para obtener el estado y el ciclo de vida de un componente?",
                        "options": [
                          "useState()",
                          "useEffect()",
                          "useComponent()"
                        ],
                        "answer": "useEffect()",
                        "images": "https://example.com/react-lifecycle.png",
                        "information": "useEffect() es un hook de React utilizado para obtener el ciclo de vida y el estado de un componente funcional, permitiendo efectos secundarios basados en cambios de estado o props."
                      },
                      {
                        "ask": "¿Qué método se utiliza para actualizar el estado en un componente de React?",
                        "options": [
                          "updateState()",
                          "setState()",
                          "modifyState()"
                        ],
                        "answer": "setState()",
                        "images": "https://example.com/react-setState.png",
                        "information": "setState() es el método utilizado en React para actualizar el estado de un componente, permitiendo re-renderizar el componente con los nuevos datos."
                      },
                      {
                        "ask": "¿Qué hook de React se utiliza para realizar efectos secundarios después de que el componente se haya renderizado?",
                        "options": [
                          "useEffect()",
                          "useEffectAfter()",
                          "afterEffect()"
                        ],
                        "answer": "useEffect()",
                        "images": "https://example.com/react-useEffect.png",
                        "information": "useEffect() es un hook de React utilizado para realizar efectos secundarios después de que el componente se haya renderizado, como peticiones HTTP, suscripciones a eventos o limpieza de recursos."
                      },
                      {
                        "ask": "¿Qué método se utiliza para manejar eventos de clic en React?",
                        "options": [
                          "handleEvent()",
                          "onClick()",
                          "eventHandler()"
                        ],
                        "answer": "onClick()",
                        "images": "https://example.com/react-onClick.png",
                        "information": "onClick() es el método utilizado en React para manejar eventos de clic, permitiendo a los componentes responder a las interacciones del usuario y ejecutar acciones específicas."
                      },
                      {
                        "ask": "¿Cuál es la forma correcta de definir un componente funcional en React?",
                        "options": [
                          "function MyComponent() {}",
                          "class MyComponent {}",
                          "const MyComponent = () => {}"
                        ],
                        "answer": "const MyComponent = () => {}",
                        "images": "https://example.com/react-functional-component.png",
                        "information": "La forma correcta de definir un componente funcional en React es utilizando la sintaxis 'const MyComponent = () => {}', que permite crear componentes basados en funciones con estado y props."
                      },
                      {
                        "ask": "¿Qué hook de React se utiliza para obtener el estado y el ciclo de vida de un componente?",
                        "options": [
                          "useState()",
                          "useEffect()",
                          "useComponent()"
                        ],
                        "answer": "useEffect()",
                        "images": "https://example.com/react-lifecycle.png",
                        "information": "useEffect() es un hook de React utilizado para obtener el ciclo de vida y el estado de un componente funcional, permitiendo efectos secundarios basados en cambios de estado o props."
                      },
                      {
                        "ask": "¿Qué hook de React se utiliza para manejar el estado en un componente funcional?",
                        "options": [
                          "useState()",
                          "setState()",
                          "modifyState()"
                        ],
                        "answer": "useState()",
                        "images": "https://example.com/react-useState.png",
                        "information": "useState() es un hook de React utilizado para añadir el estado local a los componentes funcionales, permitiendo que el componente reaccione y se actualice según los cambios de estado."
                      },
                      {
                        "ask": "¿Qué hook de React se utiliza para realizar efectos secundarios después de cada renderizado?",
                        "options": [
                          "useEffect()",
                          "useEffectAfter()",
                          "afterEffect()"
                        ],
                        "answer": "useEffect()",
                        "images": "https://example.com/react-useEffect.png",
                        "information": "useEffect() es un hook de React utilizado para realizar efectos secundarios después de cada renderizado, como peticiones HTTP, suscripciones a eventos o limpieza de recursos."
                      },
                      {
                        "ask": "¿Cuál es la función utilizada en useEffect() para limpiar suscripciones y efectos?",
                        "options": [
                          "cleanupEffect()",
                          "clearEffect()",
                          "return cleanupFunction"
                        ],
                        "answer": "cleanupEffect()",
                        "images": "https://example.com/react-useEffect-cleanup.png",
                        "information": "Para limpiar suscripciones y efectos en useEffect(), se utiliza una función de limpieza que puede devolver en la forma de una función cleanupEffect(). Esto asegura que los recursos se liberen correctamente cuando el componente se desmonte o el efecto se vuelva a ejecutar."
                      },
                      {
                        "ask": "¿Qué hook de React se utiliza para optimizar el rendimiento evitando renders innecesarios?",
                        "options": [
                          "useMemo()",
                          "useRef()",
                          "optimizeRender()"
                        ],
                        "answer": "useMemo()",
                        "images": "https://example.com/react-useMemo.png",
                        "information": "useMemo() es un hook de React utilizado para optimizar el rendimiento al memoizar valores computados entre renders, evitando cálculos costosos en cada renderizado del componente."
                      },
                      {
                        "ask": "¿Qué hook de React se utiliza para acceder al contexto en componentes de manera sencilla?",
                        "options": [
                          "useContext()",
                          "useContextAPI()",
                          "getContext()"
                        ],
                        "answer": "useContext()",
                        "images": "https://example.com/react-useContext.png",
                        "information": "useContext() es un hook de React utilizado para acceder al contexto proporcionado por un proveedor en componentes hijos, permitiendo pasar datos a través de la jerarquía de componentes sin necesidad de props adicionales."
                      }
                      
                      
                      
                ],
                "middel": [
                    
    {
        "ask": "¿Cómo se evita que un componente se vuelva a renderizar en React?",
        "options": [
            "Usando React.memo",
            "Usando useEffect",
            "Usando useState"
        ],
        "answer": "Usando React.memo",
        "images": "https://example.com/prevent-render.png",
        "information": "Para evitar que un componente se vuelva a renderizar innecesariamente, se puede usar React.memo para memorizar el componente."
    },
    {
        "ask": "¿Qué hook se utiliza para realizar tareas de limpieza en un componente funcional?",
        "options": [
            "useEffect",
            "useState",
            "useContext"
        ],
        "answer": "useEffect",
        "images": "https://example.com/cleanup-task.png",
        "information": "El hook useEffect se utiliza para realizar tareas de limpieza, devolviendo una función de limpieza en el cuerpo del useEffect."
    },
    {
        "ask": "¿Cómo se define un estado inicial complejo en un componente funcional?",
        "options": [
            "Pasando una función a useState",
            "Usando useReducer",
            "Usando useEffect"
        ],
        "answer": "Pasando una función a useState",
        "images": "https://example.com/complex-initial-state.png",
        "information": "Para definir un estado inicial complejo en un componente funcional, se puede pasar una función a useState que retorne el estado inicial."
    },
    {
        "ask": "¿Qué hook se utiliza para acceder a valores de contexto en componentes funcionales?",
        "options": [
            "useContext",
            "useState",
            "useReducer"
        ],
        "answer": "useContext",
        "images": "https://example.com/access-context.png",
        "information": "El hook useContext se utiliza para acceder a valores de contexto en componentes funcionales, permitiendo usar valores de contexto sin pasar props."
    },
    {
        "ask": "¿Cómo se puede optimizar la performance de un componente en React?",
        "options": [
            "Usando React.memo y useMemo",
            "Usando useEffect y useState",
            "Usando useReducer y useContext"
        ],
        "answer": "Usando React.memo y useMemo",
        "images": "https://example.com/optimize-performance.png",
        "information": "Para optimizar la performance de un componente en React, se pueden usar React.memo para memorizar componentes y useMemo para memorizar valores."
    },
    {
        "ask": "¿Qué hook se utiliza para manejar formularios en React?",
        "options": [
            "useState",
            "useEffect",
            "useContext"
        ],
        "answer": "useState",
        "images": "https://example.com/handle-forms.png",
        "information": "El hook useState se utiliza para manejar el estado de los campos de un formulario en componentes funcionales de React."
    },
    {
        "ask": "¿Cómo se implementa el manejo de errores en componentes funcionales?",
        "options": [
            "Usando un hook personalizado para manejo de errores",
            "Usando useState para almacenar el error",
            "Usando useEffect para lanzar errores"
        ],
        "answer": "Usando un hook personalizado para manejo de errores",
        "images": "https://example.com/error-handling.png",
        "information": "Para implementar el manejo de errores en componentes funcionales, se puede usar un hook personalizado que encapsule la lógica de manejo de errores."
    },
    {
        "ask": "¿Qué hook se utiliza para suscribirse a datos en tiempo real en componentes funcionales?",
        "options": [
            "useEffect",
            "useState",
            "useContext"
        ],
        "answer": "useEffect",
        "images": "https://example.com/real-time-data.png",
        "information": "El hook useEffect se utiliza para suscribirse a datos en tiempo real en componentes funcionales, configurando la suscripción y limpiándola al desmontar."
    },
    {
        "ask": "¿Qué hook se utiliza para manejar animaciones en React?",
        "options": [
            "useEffect con bibliotecas de animación",
            "useState para almacenar estados de animación",
            "useContext para compartir animaciones"
        ],
        "answer": "useEffect con bibliotecas de animación",
        "images": "https://example.com/handle-animations.png",
        "information": "Para manejar animaciones en React, se puede usar useEffect junto con bibliotecas de animación como GSAP o Framer Motion."
    },
    {
        "ask": "¿Cómo se pueden combinar múltiples reducers en React?",
        "options": [
            "Usando una función combinadora de reducers",
            "Usando múltiples useReducer",
            "Usando useState y useEffect juntos"
        ],
        "answer": "Usando una función combinadora de reducers",
        "images": "https://example.com/combine-reducers.png",
        "information": "Para combinar múltiples reducers en React, se puede usar una función combinadora de reducers que maneje la lógica de combinación."
    },
    {
        "ask": "¿Qué hook se utiliza para mantener el estado entre renderizados?",
        "options": [
            "useRef",
            "useState",
            "useEffect"
        ],
        "answer": "useRef",
        "images": "https://example.com/maintain-state.png",
        "information": "El hook useRef se utiliza para mantener valores entre renderizados sin causar una nueva renderización del componente."
    },
    {
        "ask": "¿Cómo se puede optimizar la renderización de listas en React?",
        "options": [
            "Usando React.memo y virtualización",
            "Usando useState para almacenar elementos",
            "Usando useEffect para manejar actualizaciones"
        ],
        "answer": "Usando React.memo y virtualización",
        "images": "https://example.com/optimize-lists.png",
        "information": "Para optimizar la renderización de listas en React, se puede usar React.memo para memorizar elementos y técnicas de virtualización para renderizar solo los visibles."
    },
    {
        "ask": "¿Qué hook se utiliza para manejar eventos personalizados en React?",
        "options": [
            "useEffect para configurar listeners",
            "useState para almacenar eventos",
            "useContext para compartir eventos"
        ],
        "answer": "useEffect para configurar listeners",
        "images": "https://example.com/custom-events.png",
        "information": "El hook useEffect se utiliza para configurar listeners de eventos personalizados en componentes funcionales de React."
    },
    {
        "ask": "¿Qué es un reducer en React?",
        "options": [
            "Una función que maneja actualizaciones de estado basadas en acciones",
            "Una función que devuelve un nuevo estado",
            "Una función que se utiliza para obtener datos"
        ],
        "answer": "Una función que maneja actualizaciones de estado basadas en acciones",
        "images": "https://example.com/reducer.png",
        "information": "Un reducer en React es una función que maneja actualizaciones de estado basadas en acciones, comúnmente usada con useReducer."
    },
    {
        "ask": "¿Qué hook se utiliza para manejar el ciclo de vida de un componente funcional?",
        "options": [
            "useEffect",
            "useState",
            "useReducer"
        ],
        "answer": "useEffect",
        "images": "https://example.com/lifecycle.png",
        "information": "El hook useEffect se utiliza para manejar el ciclo de vida de un componente funcional, como montar, actualizar y desmontar."
    },
                    {
                        "ask": "¿Qué hook se utiliza para referenciar elementos del DOM en componentes funcionales?",
                        "options": [
                            "useRef",
                            "useState",
                            "useEffect"
                        ],
                        "answer": "useRef",
                        "images": "https://example.com/useRef.png",
                        "information": "El hook useRef se utiliza para crear referencias a elementos del DOM y acceder a ellos directamente en componentes funcionales."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para ejecutar una función solo una vez al montar el componente?",
                        "options": [
                            "useEffect con una lista de dependencias vacía",
                            "useState",
                            "useMemo"
                        ],
                        "answer": "useEffect con una lista de dependencias vacía",
                        "images": "https://example.com/useEffect-once.png",
                        "information": "Para ejecutar una función solo una vez al montar el componente, se usa useEffect con una lista de dependencias vacía ([])."
                    },
                    {
                        "ask": "¿Qué función se usa para actualizar el estado en un componente de clase?",
                        "options": [
                            "setState",
                            "useState",
                            "useReducer"
                        ],
                        "answer": "setState",
                        "images": "https://example.com/setState.png",
                        "information": "En un componente de clase, la función setState se utiliza para actualizar el estado del componente."
                    },
                    {
                        "ask": "¿Cómo se pueden manejar múltiples estados relacionados en React?",
                        "options": [
                            "Usando useReducer",
                            "Usando múltiples llamadas a useState",
                            "Usando useContext"
                        ],
                        "answer": "Usando useReducer",
                        "images": "https://example.com/multiple-states.png",
                        "information": "Usando el hook useReducer se pueden manejar múltiples estados relacionados y una lógica de estado compleja de manera más estructurada."
                    },
                    {
                        "ask": "¿Qué función se usa para manejar eventos en React?",
                        "options": [
                            "Se usan funciones de evento (event handlers)",
                            "Se usa una función callback",
                            "Se usa un hook específico"
                        ],
                        "answer": "Se usan funciones de evento (event handlers)",
                        "images": "https://example.com/event-handlers.png",
                        "information": "Para manejar eventos en React, se utilizan funciones de evento (event handlers) que se pasan como props a los elementos del DOM."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para ejecutar una función cuando una variable específica cambia?",
                        "options": [
                            "useEffect",
                            "useState",
                            "useMemo"
                        ],
                        "answer": "useEffect",
                        "images": "https://example.com/variable-change.png",
                        "information": "El hook useEffect se utiliza para ejecutar una función cuando una variable específica cambia, especificando la variable en la lista de dependencias."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para memorizar valores que solo se deben recalcular cuando cambian las dependencias?",
                        "options": [
                            "useMemo",
                            "useState",
                            "useEffect"
                        ],
                        "answer": "useMemo",
                        "images": "https://example.com/memoize-values.png",
                        "information": "El hook useMemo se utiliza para memorizar valores que solo se deben recalcular cuando cambian las dependencias especificadas."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para manejar lógica de ciclo de vida en componentes funcionales?",
                        "options": [
                            "useEffect",
                            "useState",
                            "useRef"
                        ],
                        "answer": "useEffect",
                        "images": "https://example.com/lifecycle-logic.png",
                        "information": "El hook useEffect se utiliza para manejar lógica de ciclo de vida en componentes funcionales, como montar, actualizar y desmontar."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para definir valores que no cambian entre renderizados?",
                        "options": [
                            "useRef",
                            "useState",
                            "useReducer"
                        ],
                        "answer": "useRef",
                        "images": "https://example.com/define-values.png",
                        "information": "El hook useRef se utiliza para definir valores que no cambian entre renderizados, como referencias a elementos del DOM."
                    },
                    {
                        "ask": "¿Cómo se pasa un estado de un componente padre a un componente hijo en React?",
                        "options": [
                            "Usando props",
                            "Usando useState",
                            "Usando useEffect"
                        ],
                        "answer": "Usando props",
                        "images": "https://example.com/pass-state.png",
                        "information": "Para pasar un estado de un componente padre a un componente hijo en React, se utilizan props."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para manejar el contexto en componentes funcionales?",
                        "options": [
                            "useContext",
                            "useState",
                            "useMemo"
                        ],
                        "answer": "useContext",
                        "images": "https://example.com/handle-context.png",
                        "information": "El hook useContext se utiliza para manejar el contexto en componentes funcionales, permitiendo acceder a valores de contexto sin pasar props."
                    },
                    {
                        "ask": "¿Qué método se usa para hacer un componente puro en React?",
                        "options": [
                            "React.memo",
                            "React.pureComponent",
                            "React.createElement"
                        ],
                        "answer": "React.memo",
                        "images": "https://example.com/pure-component.png",
                        "information": "Para hacer un componente funcional puro en React, se utiliza React.memo, que memoiza el componente y evita renderizaciones innecesarias."
                    },
                    {
                        "ask": "¿Cómo se puede manejar una API en React?",
                        "options": [
                            "Usando useEffect para realizar solicitudes fetch",
                            "Usando useState para almacenar la URL",
                            "Usando useContext para compartir datos"
                        ],
                        "answer": "Usando useEffect para realizar solicitudes fetch",
                        "images": "https://example.com/api-handling.png",
                        "information": "Para manejar una API en React, se usa el hook useEffect para realizar solicitudes fetch y actualizar el estado con los datos obtenidos."
                    },
                    {
                        "ask": "¿Qué es el estado local en React?",
                        "options": [
                            "Estado específico de un componente",
                            "Estado compartido entre múltiples componentes",
                            "Estado global de la aplicación"
                        ],
                        "answer": "Estado específico de un componente",
                        "images": "https://example.com/local-state.png",
                        "information": "El estado local en React es el estado específico de un componente, manejado con useState o this.state en componentes de clase."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para manejar el estado de un componente funcional en React?",
                        "options": [
                            "useState",
                            "useEffect",
                            "useContext"
                        ],
                        "answer": "useState",
                        "images": "https://example.com/handle-state.png",
                        "information": "El hook useState se utiliza para manejar el estado en componentes funcionales de React, proporcionando un valor de estado y una función para actualizarlo."
                    },
                    {
                        "ask": "¿Qué es un hook en React?",
                        "options": [
                            "Una función especial que permite usar estado y otras características de React",
                            "Un componente de clase",
                            "Una forma de manejar eventos"
                        ],
                        "answer": "Una función especial que permite usar estado y otras características de React",
                        "images": "https://example.com/react-hook.png",
                        "information": "Un hook es una función especial que te permite 'enganchar' características de React como el estado y el ciclo de vida en componentes funcionales."
                    },
                    {
                        "ask": "¿Qué hook se usa para manejar efectos secundarios en componentes funcionales?",
                        "options": [
                            "useEffect",
                            "useState",
                            "useContext"
                        ],
                        "answer": "useEffect",
                        "images": "https://example.com/useEffect.png",
                        "information": "El hook useEffect te permite realizar efectos secundarios en componentes funcionales, como la obtención de datos, suscripciones o cambios manuales en el DOM."
                    },
                    {
                        "ask": "¿Cómo se crea un contexto en React?",
                        "options": [
                            "Usando React.createContext",
                            "Usando React.createRef",
                            "Usando React.createElement"
                        ],
                        "answer": "Usando React.createContext",
                        "images": "https://example.com/createContext.png",
                        "information": "React.createContext se usa para crear un contexto, que permite pasar datos a través de la estructura de componentes sin tener que pasar props manualmente en cada nivel."
                    },
                    {
                        "ask": "¿Qué es un memoized component?",
                        "options": [
                            "Un componente que solo se vuelve a renderizar si sus props cambian",
                            "Un componente que siempre se vuelve a renderizar",
                            "Un componente que no se puede reutilizar"
                        ],
                        "answer": "Un componente que solo se vuelve a renderizar si sus props cambian",
                        "images": "https://example.com/memoized-component.png",
                        "information": "Un componente memoized usa React.memo para evitar renderizaciones innecesarias. Solo se vuelve a renderizar si las props cambian."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para manejar el estado en componentes funcionales?",
                        "options": [
                            "useState",
                            "useEffect",
                            "useReducer"
                        ],
                        "answer": "useState",
                        "images": "https://example.com/useState.png",
                        "information": "El hook useState se utiliza para manejar el estado en componentes funcionales. Devuelve un valor de estado y una función para actualizarlo."
                    },
                    {
                        "ask": "¿Cómo se accede al valor actual de un input en React?",
                        "options": [
                            "Usando el atributo value del input",
                            "Usando el atributo id del input",
                            "Usando el atributo name del input"
                        ],
                        "answer": "Usando el atributo value del input",
                        "images": "https://example.com/input-value.png",
                        "information": "Para acceder al valor actual de un input en React, se usa el atributo value del input y se maneja generalmente con el estado del componente."
                    },
                    {
                        "ask": "¿Qué es el virtual DOM?",
                        "options": [
                            "Una representación en memoria del DOM real",
                            "Una copia exacta del DOM real",
                            "Una base de datos interna de React"
                        ],
                        "answer": "Una representación en memoria del DOM real",
                        "images": "https://example.com/virtual-dom.png",
                        "information": "El virtual DOM es una representación en memoria del DOM real. React lo utiliza para optimizar las actualizaciones del DOM real."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para manejar el contexto en React?",
                        "options": [
                            "useContext",
                            "useState",
                            "useEffect"
                        ],
                        "answer": "useContext",
                        "images": "https://example.com/useContext.png",
                        "information": "El hook useContext se utiliza para acceder a valores del contexto en componentes funcionales, evitando la necesidad de usar el consumidor de contexto."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para manejar estados complejos en React?",
                        "options": [
                            "useReducer",
                            "useState",
                            "useEffect"
                        ],
                        "answer": "useReducer",
                        "images": "https://example.com/useReducer.png",
                        "information": "El hook useReducer se utiliza para manejar estados complejos y lógica de estado avanzada en componentes funcionales, similar a cómo se usaría un reducer en Redux."
                    },
                    {
                        "ask": "¿Qué hook se utiliza para optimizar cálculos en React?",
                        "options": [
                            "useMemo",
                            "useEffect",
                            "useState"
                        ],
                        "answer": "useMemo",
                        "images": "https://example.com/useMemo.png",
                        "information": "El hook useMemo se utiliza para optimizar cálculos costosos al memorizar el resultado y recalcularlo solo cuando las dependencias cambian."
                    },
                    {
                        "ask": "¿Qué es un estado derivado (derived state)?",
                        "options": [
                            "Estado calculado a partir de props o state",
                            "Estado inicial",
                            "Estado final"
                        ],
                        "answer": "Estado calculado a partir de props o state",
                        "images": "https://example.com/derived-state.png",
                        "information": "Un estado derivado es un estado que se calcula a partir de props u otros estados."
                    },
                    {
                        "ask": "¿Qué hook se usa para manejar referencias a elementos del DOM?",
                        "options": [
                            "useRef",
                            "useState",
                            "useEffect"
                        ],
                        "answer": "useRef",
                        "images": "https://example.com/useRef.png",
                        "information": "useRef se usa para crear referencias mutables a elementos del DOM."
                    },
                    {
                        "ask": "¿Qué es un memoized component?",
                        "options": [
                            "Un componente optimizado con React.memo",
                            "Un componente funcional",
                            "Un componente de clase"
                        ],
                        "answer": "Un componente optimizado con React.memo",
                        "images": "https://example.com/react-memo.png",
                        "information": "React.memo es una función de orden superior que optimiza componentes funcionales."
                    },
                    {
                        "ask": "¿Qué hook se usa para memoizar valores computados?",
                        "options": [
                            "useMemo",
                            "useState",
                            "useEffect"
                        ],
                        "answer": "useMemo",
                        "images": "https://example.com/useMemo.png",
                        "information": "useMemo se utiliza para memoizar valores que se calculan para evitar cálculos innecesarios."
                    },
                    {
                        "ask": "¿Qué hook se usa para memoizar funciones?",
                        "options": [
                            "useCallback",
                            "useEffect",
                            "useState"
                        ],
                        "answer": "useCallback",
                        "images": "https://example.com/useCallback.png",
                        "information": "useCallback se usa para memoizar funciones y evitar su recreación en cada renderizado."
                    },
                    {
                        "ask": "¿Cómo se puede manejar el estado global en una aplicación React?",
                        "options": [
                            "Usando Context API",
                            "Usando useState",
                            "Usando useEffect"
                        ],
                        "answer": "Usando Context API",
                        "images": "https://example.com/context-api.png",
                        "information": "Context API permite manejar el estado global y compartir datos a lo largo de la aplicación."
                    },
                    {
                        "ask": "¿Qué es un HOC (Higher-Order Component)?",
                        "options": [
                            "Una función que toma un componente y retorna un nuevo componente",
                            "Un hook",
                            "Un componente de clase"
                        ],
                        "answer": "Una función que toma un componente y retorna un nuevo componente",
                        "images": "https://example.com/hoc.png",
                        "information": "Un HOC es una función que toma un componente y retorna un nuevo componente con funcionalidades adicionales."
                    },
                    {
                        "ask": "¿Qué es una render prop?",
                        "options": [
                            "Una técnica para compartir código entre componentes usando una prop que es una función",
                            "Un método de render",
                            "Una propiedad del estado"
                        ],
                        "answer": "Una técnica para compartir código entre componentes usando una prop que es una función",
                        "images": "https://example.com/render-prop.png",
                        "information": "Una render prop es una técnica para compartir código entre componentes usando una prop que es una función."
                    },
                    {
                        "ask": "¿Cómo se puede optimizar la renderización de listas en React?",
                        "options": [
                            "Usando keys únicas y estables",
                            "Usando useEffect",
                            "Usando useMemo"
                        ],
                        "answer": "Usando keys únicas y estables",
                        "images": "https://example.com/list-keys.png",
                        "information": "Para optimizar la renderización de listas, es importante usar keys únicas y estables para cada elemento."
                    },
                    {
                        "ask": "¿Qué es el contexto (context) en React?",
                        "options": [
                            "Un método para compartir datos a través de la aplicación sin pasar props manualmente",
                            "Un hook",
                            "Un ciclo de vida"
                        ],
                        "answer": "Un método para compartir datos a través de la aplicación sin pasar props manualmente",
                        "images": "https://example.com/react-context.png",
                        "information": "El contexto en React permite compartir datos a través de la aplicación sin necesidad de pasar props manualmente."
                    },
                    {
                        "ask": "¿Qué hook se usa para manejar referencias en componentes funcionales?",
                        "options": [
                            "useRef",
                            "useState",
                            "useEffect"
                        ],
                        "answer": "useRef",
                        "images": "https://example.com/useRef.png",
                        "information": "useRef se usa para crear referencias que persisten a lo largo del ciclo de vida del componente."
                    },
                    {
                        "ask": "¿Cómo se pueden pasar múltiples valores de estado en un solo useState?",
                        "options": [
                            "Usando un objeto",
                            "Usando un array",
                            "Usando múltiples useState"
                        ],
                        "answer": "Usando un objeto",
                        "images": "https://example.com/useState-object.png",
                        "information": "Se pueden pasar múltiples valores de estado en un solo useState usando un objeto."
                    },
                    {
                        "ask": "¿Qué es el 'lifting state up' en React?",
                        "options": [
                            "Mover el estado a un componente ancestro",
                            "Actualizar el estado",
                            "Eliminar el estado"
                        ],
                        "answer": "Mover el estado a un componente ancestro",
                        "images": "https://example.com/lifting-state-up.png",
                        "information": "Lifting state up es una técnica para mover el estado a un componente ancestro común para compartir datos entre componentes hijos."
                    },
                    {
                        "ask": "¿Qué hook se usa para ejecutar lógica después de renderizar un componente?",
                        "options": [
                            "useEffect",
                            "useState",
                            "useRef"
                        ],
                        "answer": "useEffect",
                        "images": "https://example.com/useEffect.png",
                        "information": "useEffect se usa para ejecutar lógica después de renderizar un componente, como hacer peticiones a APIs."
                    },
                    {
                        "ask": "¿Cómo se puede prevenir la re-renderización de un componente hijo en React?",
                        "options": [
                            "Usando React.memo",
                            "Usando useEffect",
                            "Usando useState"
                        ],
                        "answer": "Usando React.memo",
                        "images": "https://example.com/react-memo.png",
                        "information": "React.memo se usa para prevenir la re-renderización de componentes funcionales si sus props no cambian."
                    },
                    {
                        "ask": "¿Qué hook se usa para manejar el estado global en una aplicación React?",
                        "options": [
                            "useReducer",
                            "useState",
                            "useEffect"
                        ],
                        "answer": "useReducer",
                        "images": "https://example.com/useReducer.png",
                        "information": "useReducer se usa para manejar el estado global y lógica compleja de estado en aplicaciones React."
                    },
                    {
                        "ask": "¿Cómo se pueden hacer llamadas a una API en React?",
                        "options": [
                            "Usando fetch o Axios dentro de useEffect",
                            "Usando useState",
                            "Usando useRef"
                        ],
                        "answer": "Usando fetch o Axios dentro de useEffect",
                        "images": "https://example.com/api-calls.png",
                        "information": "Las llamadas a APIs en React se hacen típicamente usando fetch o Axios dentro de useEffect."
                    },
                    {
                        "ask": "¿Qué es un 'key' en una lista de elementos en React?",
                        "options": [
                            "Un identificador único para cada elemento",
                            "Una referencia",
                            "Una propiedad de estilo"
                        ],
                        "answer": "Un identificador único para cada elemento",
                        "images": "https://example.com/key.png",
                        "information": "Un key es un identificador único que se usa para ayudar a React a identificar qué elementos han cambiado."
                    },
                    {
                        "ask": "¿Qué hook se usa para manejar el estado local en componentes funcionales?",
                        "options": [
                            "useState",
                            "useEffect",
                            "useContext"
                        ],
                        "answer": "useState",
                        "images": "https://example.com/useState.png",
                        "information": "useState es un hook que se usa para manejar el estado local en componentes funcionales."
                    },
                    {
                        "ask": "¿Cómo se puede definir un componente de clase en React?",
                        "options": [
                            "class MyComponent extends React.Component {}",
                            "function MyComponent() {}",
                            "const MyComponent = () => {}"
                        ],
                        "answer": "class MyComponent extends React.Component {}",
                        "images": "https://example.com/class-component.png",
                        "information": "Un componente de clase se define usando la sintaxis class en JavaScript y extendiendo React.Component."
                    },
                    {
                        "ask": "¿Qué es un HOC (Higher-Order Component) en React?",
                        "options": [
                            "Un patrón que permite reutilizar lógica entre componentes",
                            "Un tipo de componente de clase",
                            "Una herramienta de renderizado"
                        ],
                        "answer": "Un patrón que permite reutilizar lógica entre componentes",
                        "images": "https://example.com/hoc-middel.png",
                        "information": "Un HOC en React es un patrón que permite reutilizar lógica entre componentes, envolviendo componentes en otros componentes para agregar funcionalidad."
                    },
                    {
                        "ask": "¿Qué son los Fragmentos en React?",
                        "options": [
                            "Una forma de agrupar múltiples elementos hijos sin agregar nodos adicionales al DOM",
                            "Una herramienta de renderizado en servidores",
                            "Un tipo de componente funcional"
                        ],
                        "answer": "Una forma de agrupar múltiples elementos hijos sin agregar nodos adicionales al DOM",
                        "images": "https://example.com/fragment-middel.png",
                        "information": "Los Fragmentos en React son una característica que permite agrupar múltiples elementos hijos sin agregar nodos adicionales al DOM, útiles cuando se necesita devolver múltiples elementos."
                    },
                    {
                        "ask": "¿Qué son las keys en las listas de elementos en React?",
                        "options": [
                            "Atributos especiales que se deben incluir al crear listas de elementos",
                            "Métodos para calcular valores",
                            "Propiedades de los componentes"
                        ],
                        "answer": "Atributos especiales que se deben incluir al crear listas de elementos",
                        "images": "https://example.com/keys-middel.png",
                        "information": "Las keys en React son atributos especiales que se deben incluir al crear listas de elementos, ayudando a React a identificar qué elementos han cambiado, se añadieron o se eliminaron."
                    },
                    {
                        "ask": "¿Qué son los Portales en React?",
                        "options": [
                            "Una forma de renderizar un elemento en un nodo DOM que existe fuera de la jerarquía principal del DOM de React",
                            "Métodos de comunicación entre componentes",
                            "Componentes especiales para estilos avanzados"
                        ],
                        "answer": "Una forma de renderizar un elemento en un nodo DOM que existe fuera de la jerarquía principal del DOM de React",
                        "images": "https://example.com/portals-middel.png",
                        "information": "Los Portales en React son una característica que permite renderizar un elemento en un nodo DOM que existe fuera de la jerarquía principal del DOM de React, útiles para modales, pop-ups y otros casos."
                    },
                    {
                        "ask": "¿Qué son las refs en React?",
                        "options": [
                            "Referencias a nodos del DOM o a componentes creados en el árbol de React",
                            "Métodos para cálculos matemáticos",
                            "Un tipo de estado"
                        ],
                        "answer": "Referencias a nodos del DOM o a componentes creados en el árbol de React",
                        "images": "https://example.com/refs-middel.png",
                        "information": "Las refs en React son referencias a nodos del DOM o a componentes creados en el árbol de React, permitiendo acceder directamente a estos elementos y modificar su comportamiento."
                    },
                    {
                        "ask": "¿Qué son los Prop-Types en React?",
                        "options": [
                            "Una característica para validar props en componentes de React",
                            "Un tipo de estado interno",
                            "Componentes especiales para renderizado"
                        ],
                        "answer": "Una característica para validar props en componentes de React",
                        "images": "https://example.com/prop-types-middel.png",
                        "information": "Los Prop-Types en React son una característica que permite validar las props recibidas por componentes de React, asegurando que los datos proporcionados sean del tipo esperado y evitando errores."
                    },
                    {
                        "ask": "¿Cómo se define un componente de presentación en React?",
                        "options": [
                            "Función que devuelve JSX sin lógica de estado",
                            "Clase que extiende Component",
                            "Método de renderización"
                        ],
                        "answer": "Función que devuelve JSX sin lógica de estado",
                        "images": "https://example.com/presentation-component-middel.png",
                        "information": "Un componente de presentación en React se define como una función que devuelve JSX sin lógica de estado, enfocado en la presentación de datos y sin manejo de estado interno."
                    },
                    {
                        "ask": "¿Qué es la desestructuración de props en React?",
                        "options": [
                            "Método para extraer valores específicos de props",
                            "Un tipo de componente funcional",
                            "Propiedades de los métodos de ciclo de vida"
                        ],
                        "answer": "Método para extraer valores específicos de props",
                        "images": "https://example.com/destructuring-props-middel.png",
                        "information": "La desestructuración de props en React es un método para extraer valores específicos de las props pasadas a un componente, facilitando el acceso a datos específicos sin tener que referirse a props directamente."
                    },
                    {
                        "ask": "¿Qué es el Context API en React?",
                        "options": [
                            "Una API para compartir datos entre componentes sin necesidad de pasar props manualmente a través de cada nivel",
                            "Un método para definir rutas en una aplicación",
                            "Una herramienta para estilizar componentes"
                        ],
                        "answer": "Una API para compartir datos entre componentes sin necesidad de pasar props manualmente a través de cada nivel",
                        "images": "https://example.com/context-api-middel.png",
                        "information": "El Context API en React es una API que permite compartir datos entre componentes sin necesidad de pasar props manualmente a través de cada nivel del árbol de componentes, útil para datos globales y temas."
                    },
                    {
                        "ask": "¿Cómo se manejan los eventos en React?",
                        "options": [
                            "Con funciones manejadoras (event handlers)",
                            "Con métodos de ciclo de vida",
                            "Con propiedades de componentes"
                        ],
                        "answer": "Con funciones manejadoras (event handlers)",
                        "images": "https://example.com/event-handlers-middel.png",
                        "information": "Los eventos en React se manejan utilizando funciones manejadoras (event handlers), que son funciones que se llaman cuando ocurre un evento como clics, cambios de estado, o envíos de formularios."
                    },
                    {
                        "ask": "¿Qué son los hooks personalizados en React?",
                        "options": [
                            "Funciones que encapsulan lógica de React para reutilización en múltiples componentes",
                            "Componentes especiales de React",
                            "Métodos de renderizado"
                        ],
                        "answer": "Funciones que encapsulan lógica de React para reutilización en múltiples componentes",
                        "images": "https://example.com/custom-hooks-expert.png",
                        "information": "Los hooks personalizados en React son funciones que encapsulan lógica de React para reutilización en múltiples componentes, permitiendo extraer lógica de estado y efectos a funciones reutilizables."
                    },
                    {
                        "ask": "¿Cómo se maneja la optimización de rendimiento en React?",
                        "options": [
                            "Con useMemo y useCallback para memoizar y optimizar funciones y resultados",
                            "Con Redux para administrar el estado global",
                            "Con métodos de ciclo de vida especiales"
                        ],
                        "answer": "Con useMemo y useCallback para memoizar y optimizar funciones y resultados",
                        "images": "https://example.com/performance-optimization-expert.png",
                        "information": "La optimización de rendimiento en React se maneja utilizando useMemo y useCallback para memoizar y optimizar funciones y resultados, reduciendo cálculos innecesarios y mejorando la velocidad de renderizado."
                    },
                    {
                        "ask": "¿Qué es la renderización condicional en React?",
                        "options": [
                            "Renderizar componentes basados en condiciones lógicas",
                            "Método para optimizar la renderización",
                            "Propiedad de CSS para estilizar componentes"
                        ],
                        "answer": "Renderizar componentes basados en condiciones lógicas",
                        "images": "https://example.com/conditional-rendering-expert.png",
                        "information": "La renderización condicional en React es el proceso de renderizar componentes basados en condiciones lógicas, como valores de estado, resultados de funciones o propiedades."
                    },
                    {
                        "ask": "¿Cómo se manejan las rutas protegidas en una aplicación React?",
                        "options": [
                            "Usando React Router para definir rutas protegidas con autenticación",
                            "Con métodos de ciclo de vida de componentes",
                            "Con props especiales"
                        ],
                        "answer": "Usando React Router para definir rutas protegidas con autenticación",
                        "images": "https://example.com/protected-routes-expert.png",
                        "information": "Las rutas protegidas en una aplicación React se manejan usando React Router para definir rutas que requieren autenticación, redirigiendo a usuarios no autenticados a páginas de inicio de sesión u otras páginas protegidas."
                    },
                    {
                        "ask": "¿Qué son los componentes de orden superior (HOC) en React?",
                        "options": [
                            "Componentes que aceptan un componente y retornan un componente nuevo con funcionalidades adicionales",
                            "Un método para renderizar componentes en un orden específico",
                            "Componentes de React con lógica especial"
                        ],
                        "answer": "Componentes que aceptan un componente y retornan un componente nuevo con funcionalidades adicionales",
                        "images": "https://example.com/hoc-expert.png",
                        "information": "Los componentes de orden superior (HOC) en React son componentes que aceptan un componente y retornan un componente nuevo con funcionalidades adicionales, útiles para agregar lógica compartida entre múltiples componentes."
                    },
                    {
                        "ask": "¿Cómo se manejan los errores en React?",
                        "options": [
                            "Usando try-catch en métodos de ciclo de vida",
                            "Con componentDidCatch para capturar errores en componentes",
                            "Con props especiales"
                        ],
                        "answer": "Con componentDidCatch para capturar errores en componentes",
                        "images": "https://example.com/error-handling-expert.png",
                        "information": "Los errores en React se manejan utilizando componentDidCatch para capturar errores en componentes y mostrar interfaces de usuario alternativas o mensajes de error, mejorando la experiencia del usuario."
                    },
                    {
                        "ask": "¿Qué son los métodos de ciclo de vida en componentes de clase en React?",
                        "options": [
                            "Métodos especiales que se ejecutan en diferentes etapas del ciclo de vida del componente",
                            "Métodos para renderizar componentes",
                            "Funciones de actualización de estado"
                        ],
                        "answer": "Métodos especiales que se ejecutan en diferentes etapas del ciclo de vida del componente",
                        "images": "https://example.com/lifecycle-methods-expert.png",
                        "information": "Los métodos de ciclo de vida en componentes de clase en React son métodos especiales que se ejecutan en diferentes etapas del ciclo de vida del componente, como montaje, actualización y desmontaje."
                    },
                    {
                        "ask": "¿Qué es el testing en React y cuáles son sus beneficios?",
                        "options": [
                            "Proceso de verificar que un componente o aplicación React funcione según lo esperado",
                            "Método para estilizar componentes de React",
                            "Funcionalidad para renderizar componentes en múltiples entornos"
                        ],
                        "answer": "Proceso de verificar que un componente o aplicación React funcione según lo esperado",
                        "images": "https://example.com/testing-expert.png",
                        "information": "El testing en React es el proceso de verificar que un componente o aplicación React funcione según lo esperado, asegurando que las funcionalidades respondan correctamente a las interacciones del usuario y cambios en el estado."
                    },
                    {
                        "ask": "¿Cómo se manejan los estilos en React?",
                        "options": [
                            "Con CSS modules, styled-components, o directamente con clases y estilos en línea",
                            "Con métodos especiales para aplicar estilos a componentes",
                            "Usando métodos de ciclo de vida"
                        ],
                        "answer": "Con CSS modules, styled-components, o directamente con clases y estilos en línea",
                        "images": "https://example.com/styling-expert.png",
                        "information": "Los estilos en React se manejan utilizando CSS modules, styled-components, o directamente con clases y estilos en línea, permitiendo aplicar estilos específicos a componentes de manera eficiente y mantenible."
                    },
                    {
                        "ask": "¿Qué es la inmutabilidad y por qué es importante en React?",
                        "options": [
                            "Concepto de no cambiar los datos directamente, sino crear copias para realizar cambios",
                            "Método para reaccionar ante cambios de estado",
                            "Función para optimizar el rendimiento"
                        ],
                        "answer": "Concepto de no cambiar los datos directamente, sino crear copias para realizar cambios",
                        "images": "https://example.com/immutability-expert.png",
                        "information": "La inmutabilidad en React es el concepto de no cambiar los datos directamente, sino crear copias para realizar cambios, asegurando la integridad de los datos y mejorando el rendimiento de la aplicación al minimizar los efectos secundarios."
                    },
                    {
                        "ask": "¿Qué diferencia hay entre los patrones de diseño MVC y MVVM en React?",
                        "options": [
                            "MVVM separa mejor la lógica de presentación y el modelo de datos",
                            "MVC es más adecuado para aplicaciones simples",
                            "No hay diferencia, son términos intercambiables"
                        ],
                        "answer": "MVVM separa mejor la lógica de presentación y el modelo de datos",
                        "images": "https://example.com/mvvm-pattern-middel.png",
                        "information": "MVVM (Modelo-Vista-Modelo de Vista) en React separa mejor la lógica de presentación (Vista) y el modelo de datos (Modelo), facilitando la interacción entre la vista y el modelo con la ayuda de un componente intermedio (Modelo de Vista)."
                    },
                    {
                        "ask": "¿Cómo se implementa el patrón de diseño Factory en la creación de componentes en React?",
                        "options": [
                            "Usando una función que crea y devuelve componentes basados en condiciones específicas",
                            "Con métodos de ciclo de vida especiales",
                            "Aplicando estilos condicionales a componentes"
                        ],
                        "answer": "Usando una función que crea y devuelve componentes basados en condiciones específicas",
                        "images": "https://example.com/factory-pattern-middel.png",
                        "information": "El patrón Factory en React se implementa usando una función que crea y devuelve componentes basados en condiciones específicas, permitiendo la creación dinámica de componentes según requerimientos o estados."
                    },
                    {
                        "ask": "¿Por qué es útil el patrón de diseño Singleton en la gestión de instancias de servicios en aplicaciones React?",
                        "options": [
                            "Garantiza que solo haya una instancia de un servicio durante todo el ciclo de vida de la aplicación",
                            "Optimiza el rendimiento de los componentes",
                            "Facilita la creación de múltiples instancias de componentes"
                        ],
                        "answer": "Garantiza que solo haya una instancia de un servicio durante todo el ciclo de vida de la aplicación",
                        "images": "https://example.com/singleton-pattern-middel.png",
                        "information": "El patrón Singleton en React es útil porque garantiza que solo haya una instancia de un servicio durante todo el ciclo de vida de la aplicación, asegurando la coherencia y eficiencia en la gestión de datos y recursos."
                    },
                    {
                        "ask": "¿Cómo se aplica el patrón de diseño Decorator para añadir funcionalidades adicionales a componentes existentes en React?",
                        "options": [
                            "Creando componentes envolventes que añaden funcionalidades sin modificar el componente original",
                            "Aplicando estilos condicionales a componentes",
                            "Usando métodos de ciclo de vida especiales"
                        ],
                        "answer": "Creando componentes envolventes que añaden funcionalidades sin modificar el componente original",
                        "images": "https://example.com/decorator-pattern-middel.png",
                        "information": "El patrón Decorator en React se aplica creando componentes envolventes que añaden funcionalidades adicionales sin modificar el componente original, mejorando la reutilización y extensibilidad del código."
                    },
                    {
                        "ask": "¿Cuál es la principal ventaja del patrón de diseño Observer en la gestión de eventos en React?",
                        "options": [
                            "Permite la suscripción y notificación de múltiples componentes a cambios en otros componentes",
                            "Facilita la aplicación de estilos condicionales a componentes",
                            "Optimiza la carga inicial de la aplicación"
                        ],
                        "answer": "Permite la suscripción y notificación de múltiples componentes a cambios en otros componentes",
                        "images": "https://example.com/observer-pattern-middel.png",
                        "information": "El patrón Observer en React permite la suscripción y notificación de múltiples componentes a cambios en otros componentes, mejorando la comunicación y sincronización entre partes de la interfaz de usuario."
                    }
                ],
                "expert": [
                    {
                        "ask": "¿Cómo se puede prevenir la re-renderización innecesaria de componentes?",
                        "options": [
                            "Usando React.memo",
                            "Usando useEffect",
                            "Usando useState"
                        ],
                        "answer": "Usando React.memo",
                        "images": "https://example.com/react-memo.png",
                        "information": "React.memo se usa para prevenir re-renderizaciones innecesarias de componentes funcionales."
                    },
                    {
                        "ask": "¿Qué hook se usa para manejar efectos secundarios que requieren cleanup?",
                        "options": [
                            "useEffect",
                            "useState",
                            "useRef"
                        ],
                        "answer": "useEffect",
                        "images": "https://example.com/useEffect-cleanup.png",
                        "information": "useEffect puede retornar una función de cleanup para manejar efectos secundarios que requieren limpieza."
                    },
                    {
                        "ask": "¿Cómo se puede manejar el estado en componentes anidados?",
                        "options": [
                            "Usando Redux",
                            "Usando props",
                            "Usando useContext"
                        ],
                        "answer": "Usando useContext",
                        "images": "https://example.com/useContext.png",
                        "information": "useContext permite manejar el estado global y compartir datos entre componentes anidados."
                    },
                    {
                        "ask": "¿Qué es la reconciliación en React?",
                        "options": [
                            "El proceso de actualizar el DOM",
                            "El proceso de montar componentes",
                            "El proceso de desmontar componentes"
                        ],
                        "answer": "El proceso de actualizar el DOM",
                        "images": "https://example.com/reconciliation.png",
                        "information": "La reconciliación es el proceso mediante el cual React actualiza el DOM para que coincida con el árbol virtual."
                    },
                    {
                        "ask": "¿Cómo se puede mejorar el rendimiento de una aplicación React?",
                        "options": [
                            "Usando lazy loading",
                            "Usando useState",
                            "Usando useEffect"
                        ],
                        "answer": "Usando lazy loading",
                        "images": "https://example.com/lazy-loading.png",
                        "information": "Lazy loading permite cargar componentes de manera diferida, mejorando el rendimiento de la aplicación."
                    },
                    {
                        "ask": "¿Qué es un portal en React?",
                        "options": [
                            "Una técnica para renderizar componentes fuera del DOM principal",
                            "Una API de navegación",
                            "Una técnica para manejar el estado"
                        ],
                        "answer": "Una técnica para renderizar componentes fuera del DOM principal",
                        "images": "https://example.com/portals.png",
                        "information": "Los portales permiten renderizar componentes hijos en un nodo del DOM fuera del DOM principal."
                    },
                    {
                        "ask": "¿Qué es el código divido (code splitting) en React?",
                        "options": [
                            "Una técnica para dividir el código en partes más pequeñas",
                            "Una técnica para manejar el estado",
                            "Una técnica para mejorar la seguridad"
                        ],
                        "answer": "Una técnica para dividir el código en partes más pequeñas",
                        "images": "https://example.com/code-splitting.png",
                        "information": "El code splitting permite dividir el código en partes más pequeñas que se cargan bajo demanda."
                    },
                    {
                        "ask": "¿Qué es el 'Suspense' en React?",
                        "options": [
                            "Una forma de mostrar una UI de espera mientras se carga algo",
                            "Un hook",
                            "Una función de renderizado"
                        ],
                        "answer": "Una forma de mostrar una UI de espera mientras se carga algo",
                        "images": "https://example.com/suspense.png",
                        "information": "Suspense es una funcionalidad de React para mostrar una interfaz de espera mientras se cargan datos u otros recursos."
                    },
                    {
                        "ask": "¿Cómo se puede manejar errores en componentes React?",
                        "options": [
                            "Usando error boundaries",
                            "Usando try/catch",
                            "Usando hooks"
                        ],
                        "answer": "Usando error boundaries",
                        "images": "https://example.com/error-boundaries.png",
                        "information": "Los error boundaries son componentes que capturan errores en sus hijos y permiten mostrar una interfaz de error."
                    },
                    {
                        "ask": "¿Qué es un context provider en React?",
                        "options": [
                            "Un componente que proporciona datos a los componentes hijos",
                            "Un hook",
                            "Una API para manejar eventos"
                        ],
                        "answer": "Un componente que proporciona datos a los componentes hijos",
                        "images": "https://example.com/context-provider.png",
                        "information": "Un context provider es un componente que utiliza el Context API para proporcionar datos a sus componentes hijos."
                    },
                    {
                        "ask": "¿Qué son los portales en React?",
                        "options": [
                            "Una forma de renderizar hijos en un nodo DOM fuera del árbol padre",
                            "Una técnica de optimización de renderizado",
                            "Una API para manejar múltiples versiones de React"
                        ],
                        "answer": "Una forma de renderizar hijos en un nodo DOM fuera del árbol padre",
                        "images": "https://example.com/portals.png",
                        "information": "Los portales en React permiten renderizar hijos en un nodo DOM fuera del árbol padre del componente."
                    },
                    {
                        "ask": "¿Cómo se puede manejar la internacionalización en una aplicación React?",
                        "options": [
                            "Usando bibliotecas como react-intl o i18next",
                            "Usando useEffect y useState",
                            "Usando useRef y useMemo"
                        ],
                        "answer": "Usando bibliotecas como react-intl o i18next",
                        "images": "https://example.com/internationalization.png",
                        "information": "La internacionalización en React se maneja típicamente usando bibliotecas especializadas como react-intl o i18next."
                    },
                    {
                        "ask": "¿Qué es la renderización condicional en React?",
                        "options": [
                            "Renderizar componentes basados en condiciones",
                            "Renderizar solo una vez",
                            "No renderizar componentes"
                        ],
                        "answer": "Renderizar componentes basados en condiciones",
                        "images": "https://example.com/conditional-rendering.png",
                        "information": "La renderización condicional en React es el proceso de renderizar componentes basados en condiciones lógicas."
                    },
                    {
                        "ask": "¿Cómo se puede optimizar el rendimiento de una lista larga en React?",
                        "options": [
                            "Usando la clave única (key) para cada elemento",
                            "Usando solo componentes funcionales",
                            "Usando React.memo"
                        ],
                        "answer": "Usando la clave única (key) para cada elemento",
                        "images": "https://example.com/key-optimization.png",
                        "information": "La optimización del rendimiento de una lista larga en React se logra usando keys únicas para cada elemento para ayudar a React a identificar cambios eficientemente."
                    },
                    {
                        "ask": "¿Qué son los componentes de orden superior (HOC) en React?",
                        "options": [
                            "Componentes que toman otros componentes como argumentos y devuelven un nuevo componente",
                            "Componentes para el manejo de estado",
                            "Componentes de acceso"
                        ],
                        "answer": "Componentes que toman otros componentes como argumentos y devuelven un nuevo componente",
                        "images": "https://example.com/hoc.png",
                        "information": "Los componentes de orden superior (HOC) en React son funciones que toman componentes como argumentos y devuelven un nuevo componente."
                    },
                    {
                        "ask": "¿Qué es el 'context' en React?",
                        "options": [
                            "Un mecanismo para pasar datos a través del árbol de componentes sin tener que pasar props manualmente en cada nivel",
                            "Un método del ciclo de vida",
                            "Una técnica para animaciones"
                        ],
                        "answer": "Un mecanismo para pasar datos a través del árbol de componentes sin tener que pasar props manualmente en cada nivel",
                        "images": "https://example.com/context.png",
                        "information": "El contexto (context) en React es un mecanismo que permite pasar datos a través del árbol de componentes sin tener que pasar props manualmente en cada nivel."
                    },
                    {
                        "ask": "¿Cómo se puede hacer testing de componentes en React?",
                        "options": [
                            "Usando herramientas como Jest y React Testing Library",
                            "Usando solo console.log()",
                            "Usando solo Cypress"
                        ],
                        "answer": "Usando herramientas como Jest y React Testing Library",
                        "images": "https://example.com/testing-react.png",
                        "information": "El testing de componentes en React se realiza típicamente usando herramientas de testing como Jest y React Testing Library."
                    },
                    {
                        "ask": "¿Qué es un 'hook' personalizado en React?",
                        "options": [
                            "Una función que usa otros hooks",
                            "Una función para manejar eventos",
                            "Un método del ciclo de vida"
                        ],
                        "answer": "Una función que usa otros hooks",
                        "images": "https://example.com/custom-hook.png",
                        "information": "Un hook personalizado en React es una función que usa uno o más hooks React dentro de ella para encapsular lógica reusable."
                    },
                    {
                        "ask": "¿Cómo se puede manejar la autenticación en una aplicación React?",
                        "options": [
                            "Usando bibliotecas como Auth0 o Firebase Auth",
                            "Usando solo cookies",
                            "Usando localStorage"
                        ],
                        "answer": "Usando bibliotecas como Auth0 o Firebase Auth",
                        "images": "https://example.com/authentication.png",
                        "information": "La autenticación en una aplicación React se maneja típicamente usando bibliotecas especializadas como Auth0 o Firebase Auth."
                    },
                    {
                        "ask": "¿Qué es la 'virtual DOM' en React?",
                        "options": [
                            "Una representación ligera del DOM en memoria",
                            "Una técnica de renderizado",
                            "Una herramienta para debugging"
                        ],
                        "answer": "Una representación ligera del DOM en memoria",
                        "images": "https://example.com/virtual-dom.png",
                        "information": "La virtual DOM en React es una representación ligera del DOM en memoria que React usa para mejorar el rendimiento y eficiencia en las actualizaciones del DOM."
                    },
                    {
                        "ask": "¿Cómo se puede manejar errores en React?",
                        "options": [
                            "Usando componentDidCatch",
                            "Usando solo try-catch en funciones",
                            "No manejar errores"
                        ],
                        "answer": "Usando componentDidCatch",
                        "images": "https://example.com/error-handling.png",
                        "information": "Los errores en React se manejan usando componentDidCatch en componentes de clase o usando un ErrorBoundary para capturar errores en componentes funcionales."
                    },
                    {
                        "ask": "¿Cómo se aplica el patrón de diseño Composite en la construcción de árboles de componentes en React?",
                        "options": [
                            "Creando componentes que pueden contener una lista de otros componentes",
                            "Aplicando estilos dinámicos a componentes",
                            "Optimizando la carga inicial de la aplicación"
                        ],
                        "answer": "Creando componentes que pueden contener una lista de otros componentes",
                        "images": "https://example.com/composite-pattern-expert.png",
                        "information": "El patrón Composite en React se aplica creando componentes que pueden contener una lista de otros componentes, facilitando la construcción de árboles de componentes complejos y la manipulación de grupos de componentes de manera uniforme."
                    },
                    {
                        "ask": "¿Cuál es la diferencia entre el patrón de diseño Bridge y el patrón Adapter en la integración de componentes en React?",
                        "options": [
                            "Bridge separa una abstracción de su implementación, mientras que Adapter adapta interfaces incompatibles",
                            "Ambos son intercambiables",
                            "Bridge y Adapter son lo mismo"
                        ],
                        "answer": "Bridge separa una abstracción de su implementación, mientras que Adapter adapta interfaces incompatibles",
                        "images": "https://example.com/bridge-adapter-difference-expert.png",
                        "information": "En React, el patrón Bridge separa una abstracción de su implementación, permitiendo que ambas puedan variar independientemente. En cambio, el patrón Adapter adapta interfaces incompatibles para que puedan trabajar juntas."
                    },
                    {
                        "ask": "¿Cómo se implementa el patrón de diseño Facade en React para proporcionar una interfaz unificada a un conjunto de interfaces en un subsistema?",
                        "options": [
                            "Creando un componente que provee una interfaz simple para interactuar con subsistemas más complejos",
                            "Aplicando estilos dinámicos a componentes",
                            "Optimizando la velocidad de renderizado de componentes"
                        ],
                        "answer": "Creando un componente que provee una interfaz simple para interactuar con subsistemas más complejos",
                        "images": "https://example.com/facade-pattern-expert.png",
                        "information": "El patrón Facade en React se implementa creando un componente que provee una interfaz simple y unificada para interactuar con subsistemas más complejos, ocultando la complejidad interna y simplificando el uso de múltiples interfaces."
                    },
                    {
                        "ask": "¿Por qué es útil el patrón de diseño Proxy en la gestión de recursos costosos en aplicaciones React?",
                        "options": [
                            "Controla el acceso a objetos costosos proporcionando un sustituto o placeholder",
                            "Optimiza la carga inicial de la aplicación",
                            "Crea componentes envolventes que añaden funcionalidades adicionales"
                        ],
                        "answer": "Controla el acceso a objetos costosos proporcionando un sustituto o placeholder",
                        "images": "https://example.com/proxy-pattern-expert.png",
                        "information": "El patrón Proxy en React es útil porque controla el acceso a objetos costosos proporcionando un sustituto o placeholder, mejorando el rendimiento y la eficiencia al cargar y manejar recursos costosos en la aplicación."
                    },
                    {
                        "ask": "¿Cómo se implementa el patrón de diseño Flyweight para optimizar el rendimiento de componentes React?",
                        "options": [
                            "Extrayendo y reutilizando instancias comunes de componentes para reducir el uso de memoria",
                            "Aplicando estilos dinámicos a componentes",
                            "Usando una función que crea y devuelve componentes basados en condiciones específicas"
                        ],
                        "answer": "Extrayendo y reutilizando instancias comunes de componentes para reducir el uso de memoria",
                        "images": "https://example.com/flyweight-pattern-expert.png",
                        "information": "El patrón Flyweight en React se implementa extrayendo y reutilizando instancias comunes de componentes para reducir el uso de memoria, optimizando así el rendimiento al manejar grandes cantidades de componentes similares en la aplicación."
                    }
                ],
                "god": [
                    {
                        "ask": "¿Cómo se puede implementar SSR (Server-Side Rendering) con React?",
                        "options": [
                            "Usando Next.js",
                            "Usando Redux",
                            "Usando useEffect"
                        ],
                        "answer": "Usando Next.js",
                        "images": "https://example.com/ssr.png",
                        "information": "Next.js es un framework de React que permite implementar renderizado del lado del servidor (SSR)."
                    },
                    {
                        "ask": "¿Qué es la renderización estática en React?",
                        "options": [
                            "Generar HTML en build time",
                            "Generar HTML en runtime",
                            "Generar HTML en el servidor"
                        ],
                        "answer": "Generar HTML en build time",
                        "images": "https://example.com/static-rendering.png",
                        "information": "La renderización estática genera HTML en el tiempo de construcción (build time), mejorando el rendimiento y SEO."
                    },
                    {
                        "ask": "¿Qué es el Context API?",
                        "options": [
                            "Un método para manejar el estado global",
                            "Un hook",
                            "Una función de renderizado"
                        ],
                        "answer": "Un método para manejar el estado global",
                        "images": "https://example.com/context-api.png",
                        "information": "El Context API permite manejar el estado global y compartir datos a lo largo de la aplicación."
                    },
                    {
                        "ask": "¿Cómo se puede manejar datos asincrónicos en React?",
                        "options": [
                            "Usando useEffect y fetch/axios",
                            "Usando useState",
                            "Usando useContext"
                        ],
                        "answer": "Usando useEffect y fetch/axios",
                        "images": "https://example.com/async-data.png",
                        "information": "useEffect se utiliza junto con fetch o axios para manejar datos asincrónicos en React."
                    },
                    {
                        "ask": "¿Qué es la hidratación (hydration) en React?",
                        "options": [
                            "El proceso de añadir interactividad al HTML renderizado en el servidor",
                            "El proceso de renderizar componentes",
                            "El proceso de manejar el estado"
                        ],
                        "answer": "El proceso de añadir interactividad al HTML renderizado en el servidor",
                        "images": "https://example.com/hydration.png",
                        "information": "La hidratación es el proceso de añadir interactividad al HTML que ha sido renderizado previamente en el servidor."
                    },
                    {
                        "ask": "¿Qué es la API de contexto (Context API)?",
                        "options": [
                            "Un método para manejar el estado global",
                            "Un hook",
                            "Una función de renderizado"
                        ],
                        "answer": "Un método para manejar el estado global",
                        "images": "https://example.com/context-api.png",
                        "information": "La API de contexto permite manejar el estado global y compartir datos a lo largo de la aplicación."
                    },
                    {
                        "ask": "¿Cómo se puede optimizar el rendimiento de una aplicación React grande?",
                        "options": [
                            "Usando React.lazy y Suspense",
                            "Usando useEffect",
                            "Usando useState"
                        ],
                        "answer": "Usando React.lazy y Suspense",
                        "images": "https://example.com/react-lazy-suspense.png",
                        "information": "React.lazy y Suspense permiten cargar componentes de manera diferida, mejorando el rendimiento de la aplicación."
                    },
                    {
                        "ask": "¿Qué es un hook personalizado en React?",
                        "options": [
                            "Una función que encapsula lógica reutilizable",
                            "Un método del ciclo de vida",
                            "Una técnica para manejar el estado"
                        ],
                        "answer": "Una función que encapsula lógica reutilizable",
                        "images": "https://example.com/custom-hook.png",
                        "information": "Un hook personalizado es una función que encapsula lógica reutilizable en componentes funcionales."
                    },
                    {
                        "ask": "¿Cómo se puede manejar la carga de grandes listas de datos en React?",
                        "options": [
                            "Usando virtualización de listas",
                            "Usando useState",
                            "Usando useEffect"
                        ],
                        "answer": "Usando virtualización de listas",
                        "images": "https://example.com/virtualization.png",
                        "information": "La virtualización de listas permite renderizar solo los elementos visibles en la pantalla, mejorando el rendimiento."
                    },
                    {
                        "ask": "¿Qué es el 'Strict Mode' en React?",
                        "options": [
                            "Una herramienta para identificar problemas potenciales en la aplicación",
                            "Un hook",
                            "Una técnica para mejorar la seguridad"
                        ],
                        "answer": "Una herramienta para identificar problemas potenciales en la aplicación",
                        "images": "https://example.com/strict-mode.png",
                        "information": "El 'Strict Mode' es una herramienta de desarrollo que ayuda a identificar problemas potenciales en una aplicación React."
                    },
                    {
                        "ask": "¿Qué es 'server-side rendering' en React?",
                        "options": [
                            "Renderización del lado del servidor para generar HTML inicial en lugar de en el cliente",
                            "Renderización del lado del cliente",
                            "Un método de optimización"
                        ],
                        "answer": "Renderización del lado del servidor para generar HTML inicial en lugar de en el cliente",
                        "images": "https://example.com/server-side-rendering.png",
                        "information": "Server-side rendering en React es el proceso de renderizar HTML inicial en el servidor antes de enviarlo al cliente, mejorando el tiempo de carga inicial y SEO."
                    },
                    {
                        "ask": "¿Cómo se puede implementar un 'service worker' en una aplicación React?",
                        "options": [
                            "Usando el API de service workers de JavaScript",
                            "Usando solo React",
                            "Usando localStorage"
                        ],
                        "answer": "Usando el API de service workers de JavaScript",
                        "images": "https://example.com/service-worker.png",
                        "information": "Un service worker en una aplicación React se implementa usando el API de service workers de JavaScript para manejar operaciones offline, caching y notificaciones push."
                    },
                    {
                        "ask": "¿Qué es la 'lazy loading' en React?",
                        "options": [
                            "Una técnica para cargar componentes solo cuando se necesitan",
                            "Una técnica de renderizado",
                            "Una herramienta de debugging"
                        ],
                        "answer": "Una técnica para cargar componentes solo cuando se necesitan",
                        "images": "https://example.com/lazy-loading.png",
                        "information": "Lazy loading en React es una técnica donde los componentes se cargan solo cuando son necesarios, mejorando el rendimiento inicial de la aplicación."
                    },
                    {
                        "ask": "¿Cómo se puede implementar 'code splitting' en una aplicación React?",
                        "options": [
                            "Dividiendo el código en partes más pequeñas que se cargan bajo demanda",
                            "Usando solo un archivo JavaScript grande",
                            "Usando localStorage"
                        ],
                        "answer": "Dividiendo el código en partes más pequeñas que se cargan bajo demanda",
                        "images": "https://example.com/code-splitting.png",
                        "information": "Code splitting en React es una técnica donde se divide el código en partes más pequeñas que se cargan bajo demanda, mejorando el rendimiento y la velocidad de carga de la aplicación."
                    },
                    {
                        "ask": "¿Cómo se puede asegurar una aplicación React?",
                        "options": [
                            "Usando HTTPS",
                            "Usando solo HTTP",
                            "No asegurando la aplicación"
                        ],
                        "answer": "Usando HTTPS",
                        "images": "https://example.com/https.png",
                        "information": "La seguridad en una aplicación React se asegura usando HTTPS para proteger las comunicaciones entre el cliente y el servidor."
                    },
                    {
                        "ask": "¿Qué son los 'refs' en React y cuándo se utilizan?",
                        "options": [
                            "Referencias a elementos del DOM usadas para acceder a nodos de forma imperativa",
                            "Objetos para almacenar estado",
                            "Variables para iteraciones"
                        ],
                        "answer": "Referencias a elementos del DOM usadas para acceder a nodos de forma imperativa",
                        "images": "https://example.com/refs.png",
                        "information": "Los 'refs' en React son referencias a elementos del DOM utilizadas para acceder a nodos de forma imperativa."
                    },
                    {
                        "ask": "¿Cómo se maneja el enrutamiento protegido en una aplicación React?",
                        "options": [
                            "Usando un componente de alta orden (HOC) para verificar la autenticación",
                            "Usando solo props",
                            "Usando localStorage"
                        ],
                        "answer": "Usando un componente de alta orden (HOC) para verificar la autenticación",
                        "images": "https://example.com/protected-routing.png",
                        "information": "El enrutamiento protegido en una aplicación React se maneja usando un componente de alto orden (HOC) para verificar la autenticación antes de renderizar componentes protegidos."
                    },
                    {
                        "ask": "¿Cómo se puede implementar la integración de GraphQL en una aplicación React?",
                        "options": [
                            "Usando Apollo Client",
                            "Usando solo REST API",
                            "Usando localStorage"
                        ],
                        "answer": "Usando Apollo Client",
                        "images": "https://example.com/graphql-integration.png",
                        "information": "La integración de GraphQL en una aplicación React se implementa típicamente usando Apollo Client para manejar las consultas y actualizaciones de datos de manera eficiente."
                    },
                    {
                        "ask": "¿Qué son los 'portales' en React y cuándo se utilizan?",
                        "options": [
                            "Una forma de renderizar hijos en un nodo DOM fuera del árbol padre",
                            "Objetos para almacenar datos",
                            "Variables para iteraciones"
                        ],
                        "answer": "Una forma de renderizar hijos en un nodo DOM fuera del árbol padre",
                        "images": "https://example.com/portals-advanced.png",
                        "information": "Los 'portales' en React permiten renderizar hijos en un nodo DOM fuera del árbol padre del componente, útil para casos como modales o elementos flotantes."
                    },
                    {
                        "ask": "¿Cómo se puede implementar la animación en una aplicación React?",
                        "options": [
                            "Usando bibliotecas como React Spring o Framer Motion",
                            "Usando solo CSS",
                            "Usando localStorage"
                        ],
                        "answer": "Usando bibliotecas como React Spring o Framer Motion",
                        "images": "https://example.com/react-animation.png",
                        "information": "La animación en una aplicación React se implementa usando bibliotecas especializadas como React Spring o Framer Motion para crear transiciones y efectos visuales dinámicos."
                    },
                    {
                        "ask": "¿Qué son los 'hooks' personalizados en React?",
                        "options": [
                            "Funciones que usan otros hooks para encapsular lógica reusable",
                            "Métodos para manejar eventos",
                            "Objetos para almacenar estado"
                        ],
                        "answer": "Funciones que usan otros hooks para encapsular lógica reusable",
                        "images": "https://example.com/custom-hooks-advanced.png",
                        "information": "Los 'hooks' personalizados en React son funciones que utilizan uno o más hooks React dentro de ellas para encapsular lógica reusable y modularizar el código."
                    },
                    {
                        "ask": "¿Cómo se puede manejar el estado global en una aplicación React sin Redux?",
                        "options": [
                            "Usando Context API",
                            "Usando solo props",
                            "Usando localStorage"
                        ],
                        "answer": "Usando Context API",
                        "images": "https://example.com/context-api.png",
                        "information": "El estado global en una aplicación React sin Redux se maneja típicamente usando Context API para compartir datos entre componentes sin necesidad de pasar props manualmente a través de cada nivel."
                    },
                    {
                        "ask": "¿Qué son los 'hooks' de renderizado en React?",
                        "options": [
                            "Hooks como useMemo y useCallback para optimizar el rendimiento",
                            "Métodos para renderizar componentes",
                            "Objetos para almacenar datos"
                        ],
                        "answer": "Hooks como useMemo y useCallback para optimizar el rendimiento",
                        "images": "https://example.com/rendering-hooks.png",
                        "information": "Los 'hooks' de renderizado en React como useMemo y useCallback se utilizan para optimizar el rendimiento al memoizar valores y funciones callback para evitar cálculos innecesarios y renderizaciones."
                    },
                    {
                        "ask": "¿Qué es el 'server-side rendering' (SSR) en React y cuáles son sus beneficios?",
                        "options": [
                            "Renderización del lado del servidor para mejorar el SEO y el tiempo de carga inicial",
                            "Renderización del lado del cliente",
                            "Un método para debugging"
                        ],
                        "answer": "Renderización del lado del servidor para mejorar el SEO y el tiempo de carga inicial",
                        "images": "https://example.com/ssr.png",
                        "information": "El 'server-side rendering' (SSR) en React es el proceso de renderizar HTML inicial en el servidor antes de enviarlo al cliente, lo cual mejora el SEO y el tiempo de carga inicial de la aplicación."
                    },
                    {
                        "ask": "¿Cómo se puede mejorar la seguridad en una aplicación React?",
                        "options": [
                            "Usando prácticas de seguridad como sanitización de datos y autenticación segura",
                            "Usando solo localStorage",
                            "Usando HTTP en lugar de HTTPS"
                        ],
                        "answer": "Usando prácticas de seguridad como sanitización de datos y autenticación segura",
                        "images": "https://example.com/react-security.png",
                        "information": "La seguridad en una aplicación React se mejora implementando prácticas como la sanitización de datos, la autenticación segura y el uso de HTTPS para proteger las comunicaciones."
                    },
                    {
                        "ask": "¿Cómo se aplica el patrón de diseño Observer para gestionar las actualizaciones entre componentes en React?",
                        "options": [
                            "Utilizando un componente observable y suscriptores que reaccionan a los cambios",
                            "Aplicando estilos dinámicos a componentes",
                            "Optimizando la velocidad de renderizado de componentes"
                        ],
                        "answer": "Utilizando un componente observable y suscriptores que reaccionan a los cambios",
                        "images": "https://example.com/observer-pattern-god.png",
                        "information": "El patrón Observer en React se aplica utilizando un componente observable que notifica a sus suscriptores sobre cambios importantes, permitiendo una gestión eficiente de las actualizaciones entre componentes."
                    },
                    {
                        "ask": "¿Por qué es beneficioso implementar el patrón de diseño Decorator en la composición de componentes React?",
                        "options": [
                            "Para añadir responsabilidades adicionales a objetos de manera dinámica",
                            "Optimiza la carga inicial de la aplicación",
                            "Crea componentes envolventes que añaden funcionalidades adicionales"
                        ],
                        "answer": "Para añadir responsabilidades adicionales a objetos de manera dinámica",
                        "images": "https://example.com/decorator-pattern-god.png",
                        "information": "El patrón Decorator en React es beneficioso porque permite añadir responsabilidades adicionales a objetos de manera dinámica, extendiendo así la funcionalidad de los componentes de manera flexible y sin modificar su estructura base."
                    },
                    {
                        "ask": "¿Cómo se implementa el patrón de diseño Strategy para permitir que un componente React pueda cambiar su comportamiento en tiempo de ejecución?",
                        "options": [
                            "Definiendo una familia de algoritmos, encapsulándolos y haciendo que sean intercambiables",
                            "Aplicando estilos dinámicos a componentes",
                            "Usando una función que crea y devuelve componentes basados en condiciones específicas"
                        ],
                        "answer": "Definiendo una familia de algoritmos, encapsulándolos y haciendo que sean intercambiables",
                        "images": "https://example.com/strategy-pattern-god.png",
                        "information": "El patrón Strategy en React se implementa definiendo una familia de algoritmos, encapsulándolos y haciendo que sean intercambiables dinámicamente, permitiendo que un componente pueda cambiar su comportamiento en tiempo de ejecución según sea necesario."
                    },
                    {
                        "ask": "¿Por qué es útil aplicar el patrón de diseño Singleton en la gestión de instancias únicas de componentes React?",
                        "options": [
                            "Para asegurar que solo exista una instancia de un componente en toda la aplicación",
                            "Optimizar la velocidad de renderizado de componentes",
                            "Controlar el flujo de datos entre componentes"
                        ],
                        "answer": "Para asegurar que solo exista una instancia de un componente en toda la aplicación",
                        "images": "https://example.com/singleton-pattern-god.png",
                        "information": "El patrón Singleton en React es útil porque asegura que solo exista una instancia de un componente en toda la aplicación, evitando así problemas de sincronización y garantizando el acceso controlado a dicha instancia."
                    },
                    {
                        "ask": "¿Cómo se implementa el patrón de diseño Factory Method para crear componentes React basados en ciertos criterios?",
                        "options": [
                            "Definiendo una interfaz para crear un objeto, pero permitiendo que las subclases decidan qué clase instanciar",
                            "Aplicando estilos dinámicos a componentes",
                            "Optimizando la velocidad de renderizado de componentes"
                        ],
                        "answer": "Definiendo una interfaz para crear un objeto, pero permitiendo que las subclases decidan qué clase instanciar",
                        "images": "https://example.com/factory-method-pattern-god.png",
                        "information": "El patrón Factory Method en React se implementa definiendo una interfaz para crear un objeto, pero permitiendo que las subclases decidan qué clase instanciar, proporcionando así una forma flexible de crear componentes basados en ciertos criterios específicos."
                    }
                ]
            }
        },
        {
            "node": {
                "basic": [
                    {
                        "ask": "¿Cómo se inicia un nuevo proyecto en Node.js?",
                        "options": [
                            "Usando el comando 'npm init'",
                            "Usando el comando 'node start'",
                            "Usando el comando 'npm install'"
                        ],
                        "answer": "Usando el comando 'npm init'",
                        "images": "https://example.com/npm-init.png",
                        "information": "Para iniciar un nuevo proyecto en Node.js, se utiliza el comando 'npm init', que crea un archivo package.json."
                    },
                    {
                        "ask": "¿Cómo se instala un paquete en Node.js?",
                        "options": [
                            "Usando el comando 'npm install <paquete>'",
                            "Usando el comando 'node install <paquete>'",
                            "Usando el comando 'npm start <paquete>'"
                        ],
                        "answer": "Usando el comando 'npm install <paquete>'",
                        "images": "https://example.com/npm-install.png",
                        "information": "Para instalar un paquete en Node.js, se utiliza el comando 'npm install <paquete>'."
                    },
                    {
                        "ask": "¿Cuál es el archivo principal en un proyecto de Node.js?",
                        "options": [
                            "index.js",
                            "main.js",
                            "app.js"
                        ],
                        "answer": "index.js",
                        "images": "https://example.com/index-js.png",
                        "information": "El archivo principal en un proyecto de Node.js suele ser index.js, aunque esto se puede configurar en el package.json."
                    },
                    {
                        "ask": "¿Cómo se puede exportar una función en Node.js?",
                        "options": [
                            "module.exports = miFuncion",
                            "exports.miFuncion = miFuncion",
                            "Both of the above"
                        ],
                        "answer": "Both of the above",
                        "images": "https://example.com/module-exports.png",
                        "information": "En Node.js, se puede exportar una función usando 'module.exports = miFuncion' o 'exports.miFuncion = miFuncion'."
                    },
                    {
                        "ask": "¿Cómo se lee un archivo en Node.js?",
                        "options": [
                            "Usando el módulo 'fs'",
                            "Usando el módulo 'http'",
                            "Usando el módulo 'path'"
                        ],
                        "answer": "Usando el módulo 'fs'",
                        "images": "https://example.com/fs-readfile.png",
                        "information": "Para leer un archivo en Node.js, se usa el módulo 'fs' y su método readFile."
                    },
                    {
                        "ask": "¿Qué es npm en Node.js?",
                        "options": [
                            "Node Package Manager",
                            "Node Program Manager",
                            "Node Project Manager"
                        ],
                        "answer": "Node Package Manager",
                        "images": "https://example.com/npm.png",
                        "information": "npm (Node Package Manager) es una herramienta que se usa para gestionar paquetes en proyectos de Node.js."
                    },
                    {
                        "ask": "¿Cómo se crea un servidor HTTP básico en Node.js?",
                        "options": [
                            "Usando el módulo 'http'",
                            "Usando el módulo 'fs'",
                            "Usando el módulo 'path'"
                        ],
                        "answer": "Usando el módulo 'http'",
                        "images": "https://example.com/http-server.png",
                        "information": "Para crear un servidor HTTP básico en Node.js, se utiliza el módulo 'http'."
                    },
                    {
                        "ask": "¿Cómo se instala un paquete de manera global en Node.js?",
                        "options": [
                            "Usando el comando 'npm install -g <paquete>'",
                            "Usando el comando 'npm start -g <paquete>'",
                            "Usando el comando 'npm init -g <paquete>'"
                        ],
                        "answer": "Usando el comando 'npm install -g <paquete>'",
                        "images": "https://example.com/npm-install-global.png",
                        "information": "Para instalar un paquete de manera global en Node.js, se utiliza el comando 'npm install -g <paquete>'."
                    },
                    {
                        "ask": "¿Qué es 'require' en Node.js?",
                        "options": [
                            "Una función para importar módulos",
                            "Una función para exportar módulos",
                            "Una función para crear módulos"
                        ],
                        "answer": "Una función para importar módulos",
                        "images": "https://example.com/require.png",
                        "information": "En Node.js, 'require' es una función utilizada para importar módulos en el código."
                    },
                    {
                        "ask": "¿Cómo se define una variable de entorno en Node.js?",
                        "options": [
                            "Usando 'process.env.VARIABLE'",
                            "Usando 'global.VARIABLE'",
                            "Usando 'env.VARIABLE'"
                        ],
                        "answer": "Usando 'process.env.VARIABLE'",
                        "images": "https://example.com/env-variable.png",
                        "information": "En Node.js, una variable de entorno se define usando 'process.env.VARIABLE'."
                    },
                    {
                        "ask": "¿Cómo se maneja una promesa en Node.js?",
                        "options": [
                            "Usando 'then' y 'catch'",
                            "Usando 'resolve' y 'reject'",
                            "Usando 'try' y 'catch'"
                        ],
                        "answer": "Usando 'then' y 'catch'",
                        "images": "https://example.com/promise.png",
                        "information": "En Node.js, se manejan las promesas usando los métodos 'then' y 'catch'."
                    },
                    {
                        "ask": "¿Cómo se puede manejar rutas en una aplicación Node.js?",
                        "options": [
                            "Usando el módulo 'express'",
                            "Usando el módulo 'http'",
                            "Usando el módulo 'path'"
                        ],
                        "answer": "Usando el módulo 'express'",
                        "images": "https://example.com/express-routes.png",
                        "information": "Para manejar rutas en una aplicación Node.js, se puede usar el módulo 'express'."
                    },
                    {
                        "ask": "¿Cómo se conecta una base de datos a una aplicación Node.js?",
                        "options": [
                            "Usando un cliente de base de datos como 'mongoose' o 'pg'",
                            "Usando el módulo 'http'",
                            "Usando el módulo 'fs'"
                        ],
                        "answer": "Usando un cliente de base de datos como 'mongoose' o 'pg'",
                        "images": "https://example.com/db-connect.png",
                        "information": "Para conectar una base de datos a una aplicación Node.js, se puede usar un cliente de base de datos como 'mongoose' para MongoDB o 'pg' para PostgreSQL."
                    },
                    {
                        "ask": "¿Cómo se configura un middleware en una aplicación Node.js?",
                        "options": [
                            "Usando 'app.use' en Express",
                            "Usando 'require' en Express",
                            "Usando 'module.exports' en Express"
                        ],
                        "answer": "Usando 'app.use' en Express",
                        "images": "https://example.com/middleware.png",
                        "information": "Para configurar un middleware en una aplicación Node.js usando Express, se utiliza 'app.use'."
                    },
                    {
                        "ask": "¿Cómo se maneja el versionado de paquetes en Node.js?",
                        "options": [
                            "Usando el archivo 'package.json'",
                            "Usando el archivo 'index.js'",
                            "Usando el archivo 'app.js'"
                        ],
                        "answer": "Usando el archivo 'package.json'",
                        "images": "https://example.com/package-json.png",
                        "information": "El versionado de paquetes en Node.js se maneja utilizando el archivo 'package.json'."
                    },
                    {
                        "ask": "¿Cómo se puede ejecutar un script en Node.js?",
                        "options": [
                            "Usando el comando 'node <nombre_del_script>'",
                            "Usando el comando 'npm run <nombre_del_script>'",
                            "Usando el comando 'node start <nombre_del_script>'"
                        ],
                        "answer": "Usando el comando 'node <nombre_del_script>'",
                        "images": "https://example.com/node-script.png",
                        "information": "Para ejecutar un script en Node.js, se utiliza el comando 'node <nombre_del_script>'."
                    },
                    {
                        "ask": "¿Cómo se puede crear un servidor estático en Node.js?",
                        "options": [
                            "Usando el módulo 'express' con 'express.static'",
                            "Usando el módulo 'http'",
                            "Usando el módulo 'fs'"
                        ],
                        "answer": "Usando el módulo 'express' con 'express.static'",
                        "images": "https://example.com/express-static.png",
                        "information": "Para crear un servidor estático en Node.js, se puede usar el módulo 'express' y su función 'express.static'."
                    },
                    {
                        "ask": "¿Qué es un callback en Node.js?",
                        "options": [
                            "Una función que se pasa como argumento a otra función",
                            "Una función que se ejecuta de inmediato",
                            "Una función que detiene la ejecución del programa"
                        ],
                        "answer": "Una función que se pasa como argumento a otra función",
                        "images": "https://example.com/callback.png",
                        "information": "En Node.js, un callback es una función que se pasa como argumento a otra función y se ejecuta después de que esa función haya completado su tarea."
                    },
                    {
                        "ask": "¿Qué es un módulo en Node.js?",
                        "options": [
                            "Un archivo o conjunto de archivos que pueden ser reutilizados",
                            "Una variable global",
                            "Una función incorporada en Node.js"
                        ],
                        "answer": "Un archivo o conjunto de archivos que pueden ser reutilizados",
                        "images": "https://example.com/module.png",
                        "information": "Un módulo en Node.js es un archivo o conjunto de archivos que pueden ser reutilizados en diferentes partes de la aplicación."
                    },
                    {
                        "ask": "¿Cómo se manejan errores en Node.js?",
                        "options": [
                            "Usando bloques try-catch",
                            "Usando bloques if-else",
                            "Usando bucles for"
                        ],
                        "answer": "Usando bloques try-catch",
                        "images": "https://example.com/try-catch.png",
                        "information": "En Node.js, los errores se manejan usando bloques try-catch para capturar y manejar excepciones."
                    },
                    {
                        "ask": "¿Cómo se ejecuta código de manera asíncrona en Node.js?",
                        "options": [
                            "Usando promesas o async/await",
                            "Usando bucles while",
                            "Usando variables globales"
                        ],
                        "answer": "Usando promesas o async/await",
                        "images": "https://example.com/async-await.png",
                        "information": "Para ejecutar código de manera asíncrona en Node.js, se utilizan promesas o la sintaxis async/await."
                    },
                    {
                        "ask": "¿Cómo se puede ver la versión de Node.js instalada?",
                        "options": [
                            "Usando el comando 'node -v'",
                            "Usando el comando 'node --version'",
                            "Ambas respuestas son correctas"
                        ],
                        "answer": "Ambas respuestas son correctas",
                        "images": "https://example.com/node-version.png",
                        "information": "Para ver la versión de Node.js instalada, se pueden usar los comandos 'node -v' o 'node --version'."
                    },
                    {
                        "ask": "¿Qué es un stream en Node.js?",
                        "options": [
                            "Una secuencia de datos que se puede leer o escribir de manera continua",
                            "Un conjunto de funciones",
                            "Una colección de módulos"
                        ],
                        "answer": "Una secuencia de datos que se puede leer o escribir de manera continua",
                        "images": "https://example.com/stream.png",
                        "information": "En Node.js, un stream es una secuencia de datos que se puede leer o escribir de manera continua, ideal para manejar archivos grandes."
                    },
                    {
                        "ask": "¿Cómo se crea un nuevo proyecto con npm?",
                        "options": [
                            "Usando 'npm init'",
                            "Usando 'npm create'",
                            "Usando 'npm start'"
                        ],
                        "answer": "Usando 'npm init'",
                        "images": "https://example.com/npm-init-project.png",
                        "information": "Para crear un nuevo proyecto con npm, se utiliza el comando 'npm init', que inicializa un nuevo archivo package.json."
                    },
                    {
                        "ask": "¿Cómo se puede actualizar un paquete en Node.js?",
                        "options": [
                            "Usando 'npm update <paquete>'",
                            "Usando 'npm upgrade <paquete>'",
                            "Usando 'npm install <paquete>'"
                        ],
                        "answer": "Usando 'npm update <paquete>'",
                        "images": "https://example.com/npm-update.png",
                        "information": "Para actualizar un paquete en Node.js, se utiliza el comando 'npm update <paquete>'."
                    },
                    {
                        "ask": "¿Qué es el archivo package.json?",
                        "options": [
                            "Un archivo que contiene información sobre el proyecto y sus dependencias",
                            "Un archivo de configuración del sistema",
                            "Un archivo de estilo"
                        ],
                        "answer": "Un archivo que contiene información sobre el proyecto y sus dependencias",
                        "images": "https://example.com/package-json.png",
                        "information": "El archivo package.json contiene información sobre el proyecto, sus dependencias y scripts de ejecución."
                    },
                    {
                        "ask": "¿Cómo se puede definir un script en package.json?",
                        "options": [
                            "Agregando una entrada en el objeto 'scripts'",
                            "Agregando una entrada en el objeto 'dependencies'",
                            "Agregando una entrada en el objeto 'main'"
                        ],
                        "answer": "Agregando una entrada en el objeto 'scripts'",
                        "images": "https://example.com/scripts.png",
                        "information": "Para definir un script en package.json, se agrega una entrada en el objeto 'scripts'."
                    },
                    {
                        "ask": "¿Qué es una promesa en Node.js?",
                        "options": [
                            "Un objeto que representa una operación asíncrona",
                            "Una función sincrónica",
                            "Un módulo incorporado en Node.js"
                        ],
                        "answer": "Un objeto que representa una operación asíncrona",
                        "images": "https://example.com/promise.png",
                        "information": "Una promesa en Node.js es un objeto que representa una operación asíncrona y su resultado eventual."
                    },
                    {
                        "ask": "¿Cómo se puede cancelar un temporizador en Node.js?",
                        "options": [
                            "Usando 'clearTimeout'",
                            "Usando 'cancelTimeout'",
                            "Usando 'resetTimeout'"
                        ],
                        "answer": "Usando 'clearTimeout'",
                        "images": "https://example.com/clearTimeout.png",
                        "information": "Para cancelar un temporizador en Node.js, se utiliza la función 'clearTimeout'."
                    },
                    {
                        "ask": "¿Cómo se puede manejar un error en una promesa en Node.js?",
                        "options": [
                            "Usando el método 'catch'",
                            "Usando el método 'then'",
                            "Usando el método 'finally'"
                        ],
                        "answer": "Usando el método 'catch'",
                        "images": "https://example.com/promise-catch.png",
                        "information": "Para manejar un error en una promesa en Node.js, se utiliza el método 'catch'."
                    },
                    {
                        "ask": "¿Qué es un módulo nativo en Node.js?",
                        "options": [
                            "Un módulo incorporado que no necesita ser instalado",
                            "Un módulo descargado desde npm",
                            "Un módulo creado por el usuario"
                        ],
                        "answer": "Un módulo incorporado que no necesita ser instalado",
                        "images": "https://example.com/native-module.png",
                        "information": "Un módulo nativo en Node.js es un módulo incorporado que no necesita ser instalado, como 'fs' o 'http'."
                    },
                    {
                        "ask": "¿Cómo se pueden manejar múltiples promesas en Node.js?",
                        "options": [
                            "Usando 'Promise.all'",
                            "Usando 'Promise.one'",
                            "Usando 'Promise.any'"
                        ],
                        "answer": "Usando 'Promise.all'",
                        "images": "https://example.com/promise-all.png",
                        "information": "Para manejar múltiples promesas en Node.js, se utiliza 'Promise.all' para esperar a que todas se resuelvan."
                    },
                    {
                        "ask": "¿Qué hace el módulo 'fs' en Node.js?",
                        "options": [
                            "Permite interactuar con el sistema de archivos",
                            "Permite hacer solicitudes HTTP",
                            "Permite trabajar con datos binarios"
                        ],
                        "answer": "Permite interactuar con el sistema de archivos",
                        "images": "https://example.com/fs-module.png",
                        "information": "El módulo 'fs' en Node.js permite interactuar con el sistema de archivos para leer, escribir y manipular archivos y directorios."
                    },
                    {
                        "ask": "¿Cómo se instala un paquete globalmente usando npm?",
                        "options": [
                            "Usando el comando 'npm install -g <paquete>'",
                            "Usando el comando 'npm global install <paquete>'",
                            "Usando el comando 'npm install global <paquete>'"
                        ],
                        "answer": "Usando el comando 'npm install -g <paquete>'",
                        "images": "https://example.com/npm-global.png",
                        "information": "Para instalar un paquete globalmente en Node.js, se utiliza el comando 'npm install -g <paquete>'."
                    },
                    {
                        "ask": "¿Qué hace el método 'readFile' del módulo 'fs'?",
                        "options": [
                            "Lee el contenido de un archivo de manera asíncrona",
                            "Escribe contenido en un archivo de manera asíncrona",
                            "Elimina un archivo"
                        ],
                        "answer": "Lee el contenido de un archivo de manera asíncrona",
                        "images": "https://example.com/readFile.png",
                        "information": "El método 'readFile' del módulo 'fs' se utiliza para leer el contenido de un archivo de manera asíncrona."
                    },
                    {
                        "ask": "¿Cómo se puede crear un archivo en Node.js?",
                        "options": [
                            "Usando el método 'writeFile' del módulo 'fs'",
                            "Usando el método 'createFile' del módulo 'fs'",
                            "Usando el método 'openFile' del módulo 'fs'"
                        ],
                        "answer": "Usando el método 'writeFile' del módulo 'fs'",
                        "images": "https://example.com/writeFile.png",
                        "information": "Para crear un archivo en Node.js, se utiliza el método 'writeFile' del módulo 'fs', que permite escribir contenido en el archivo."
                    },
                    {
                        "ask": "¿Cómo se puede escuchar un evento en Node.js?",
                        "options": [
                            "Usando la clase 'EventEmitter'",
                            "Usando la clase 'EventWatcher'",
                            "Usando la clase 'EventListener'"
                        ],
                        "answer": "Usando la clase 'EventEmitter'",
                        "images": "https://example.com/eventEmitter.png",
                        "information": "En Node.js, la clase 'EventEmitter' se utiliza para escuchar y emitir eventos dentro de la aplicación."
                    },
                    {
                        "ask": "¿Cómo se puede instalar todas las dependencias listadas en package.json?",
                        "options": [
                            "Usando el comando 'npm install'",
                            "Usando el comando 'npm fetch'",
                            "Usando el comando 'npm get'"
                        ],
                        "answer": "Usando el comando 'npm install'",
                        "images": "https://example.com/npm-install.png",
                        "information": "Para instalar todas las dependencias listadas en package.json, se utiliza el comando 'npm install'."
                    },
                    {
                        "ask": "¿Qué hace el método 'setTimeout' en Node.js?",
                        "options": [
                            "Ejecuta una función después de un tiempo especificado",
                            "Ejecuta una función inmediatamente",
                            "Cancela una función programada"
                        ],
                        "answer": "Ejecuta una función después de un tiempo especificado",
                        "images": "https://example.com/setTimeout.png",
                        "information": "El método 'setTimeout' en Node.js se utiliza para ejecutar una función después de un tiempo especificado."
                    },
                    {
                        "ask": "¿Qué es un buffer en Node.js?",
                        "options": [
                            "Un área de memoria utilizada para almacenar datos binarios",
                            "Un área de memoria utilizada para almacenar texto",
                            "Una colección de funciones"
                        ],
                        "answer": "Un área de memoria utilizada para almacenar datos binarios",
                        "images": "https://example.com/buffer.png",
                        "information": "En Node.js, un buffer es un área de memoria utilizada para almacenar datos binarios de manera eficiente."
                    },
                    {
                        "ask": "¿Cómo se puede crear un servidor HTTP en Node.js?",
                        "options": [
                            "Usando el módulo 'http'",
                            "Usando el módulo 'https'",
                            "Usando el módulo 'fs'"
                        ],
                        "answer": "Usando el módulo 'http'",
                        "images": "https://example.com/http-server.png",
                        "information": "Para crear un servidor HTTP en Node.js, se utiliza el módulo 'http', que proporciona funcionalidades para crear y manejar servidores."
                    },
                    {
                        "ask": "¿Cómo se puede manejar una solicitud POST en Node.js?",
                        "options": [
                            "Usando el método 'req.on('data', callback)' para recibir datos",
                            "Usando el método 'req.write()' para enviar datos",
                            "Usando el método 'req.end()' para finalizar la respuesta"
                        ],
                        "answer": "Usando el método 'req.on('data', callback)' para recibir datos",
                        "images": "https://example.com/post-request.png",
                        "information": "Para manejar una solicitud POST en Node.js, se utiliza el método 'req.on('data', callback)' para recibir los datos enviados por el cliente."
                    },
                    {
                        "ask": "¿Qué es npm?",
                        "options": [
                            "El gestor de paquetes de Node.js",
                            "Un framework de desarrollo",
                            "Un servidor web"
                        ],
                        "answer": "El gestor de paquetes de Node.js",
                        "images": "https://example.com/npm.png",
                        "information": "npm es el gestor de paquetes de Node.js, utilizado para gestionar dependencias y módulos en los proyectos."
                    },
                    {
                        "ask": "¿Cómo se puede convertir un callback en una promesa en Node.js?",
                        "options": [
                            "Usando 'util.promisify'",
                            "Usando 'callback.promisify'",
                            "Usando 'promise.promisify'"
                        ],
                        "answer": "Usando 'util.promisify'",
                        "images": "https://example.com/promisify.png",
                        "information": "Para convertir un callback en una promesa en Node.js, se utiliza la función 'util.promisify'."
                    },
                    {
                        "ask": "¿Qué hace el módulo 'path' en Node.js?",
                        "options": [
                            "Proporciona utilidades para trabajar con rutas de archivos y directorios",
                            "Proporciona utilidades para realizar operaciones matemáticas",
                            "Proporciona utilidades para manejar solicitudes HTTP"
                        ],
                        "answer": "Proporciona utilidades para trabajar con rutas de archivos y directorios",
                        "images": "https://example.com/path.png",
                        "information": "El módulo 'path' en Node.js proporciona utilidades para trabajar con rutas de archivos y directorios."
                    },
                    {
                        "ask": "¿Cómo se puede manejar errores de promesas en Node.js?",
                        "options": [
                            "Usando el método 'catch' de las promesas",
                            "Usando el método 'then' de las promesas",
                            "Usando el método 'finally' de las promesas"
                        ],
                        "answer": "Usando el método 'catch' de las promesas",
                        "images": "https://example.com/promise-catch.png",
                        "information": "Para manejar errores de promesas en Node.js, se utiliza el método 'catch' de las promesas."
                    },
                    {
                        "ask": "¿Qué es el archivo '.env'?",
                        "options": [
                            "Un archivo que contiene variables de entorno",
                            "Un archivo de configuración de npm",
                            "Un archivo de configuración de Babel"
                        ],
                        "answer": "Un archivo que contiene variables de entorno",
                        "images": "https://example.com/env-file.png",
                        "information": "El archivo '.env' se utiliza para definir variables de entorno en un proyecto de Node.js."
                    },
                    {
                        "ask": "¿Cómo se puede definir una variable de entorno en Node.js?",
                        "options": [
                            "Usando el objeto 'process.env'",
                            "Usando el objeto 'global.env'",
                            "Usando el objeto 'node.env'"
                        ],
                        "answer": "Usando el objeto 'process.env'",
                        "images": "https://example.com/process-env.png",
                        "information": "En Node.js, las variables de entorno se definen usando el objeto 'process.env'."
                    },
                    {
                        "ask": "¿Qué es una promesa resuelta en Node.js?",
                        "options": [
                            "Una promesa que ha sido completada exitosamente",
                            "Una promesa que ha fallado",
                            "Una promesa que aún está pendiente"
                        ],
                        "answer": "Una promesa que ha sido completada exitosamente",
                        "images": "https://example.com/resolved-promise.png",
                        "information": "Una promesa resuelta en Node.js es una promesa que ha sido completada exitosamente y su resultado está disponible."
                    },
                    {
                        "ask": "¿Cómo se puede escuchar eventos del servidor en Node.js?",
                        "options": [
                            "Usando el método 'server.on(evento, callback)'",
                            "Usando el método 'server.listen(evento, callback)'",
                            "Usando el método 'server.emit(evento, callback)'"
                        ],
                        "answer": "Usando el método 'server.on(evento, callback)'",
                        "images": "https://example.com/server-on.png",
                        "information": "En Node.js, se puede escuchar eventos del servidor usando el método 'server.on(evento, callback)'."
                    },
                    {
                        "ask": "¿Qué hace el método 'fs.readdir'?",
                        "options": [
                            "Lee el contenido de un directorio",
                            "Elimina un directorio",
                            "Crea un nuevo directorio"
                        ],
                        "answer": "Lee el contenido de un directorio",
                        "images": "https://example.com/readdir.png",
                        "information": "El método 'fs.readdir' en Node.js se utiliza para leer el contenido de un directorio."
                    },
                    {
                        "ask": "¿Qué es un stream en Node.js?",
                        "options": [
                            "Una abstracción para trabajar con datos que se mueven",
                            "Un tipo de función",
                            "Una clase para manejar eventos"
                        ],
                        "answer": "Una abstracción para trabajar con datos que se mueven",
                        "images": "https://example.com/stream.png",
                        "information": "En Node.js, un stream es una abstracción para trabajar con datos que se mueven, como archivos o datos de red."
                    },
                    {
                        "ask": "¿Cómo se maneja una solicitud GET en Express?",
                        "options": [
                            "Usando 'app.get(ruta, callback)'",
                            "Usando 'app.post(ruta, callback)'",
                            "Usando 'app.put(ruta, callback)'"
                        ],
                        "answer": "Usando 'app.get(ruta, callback)'",
                        "images": "https://example.com/express-get.png",
                        "information": "Para manejar una solicitud GET en Express, se utiliza 'app.get(ruta, callback)'."
                    },
                    {
                        "ask": "¿Qué es middleware en Express?",
                        "options": [
                            "Funciones que tienen acceso al objeto de solicitud, respuesta y al siguiente middleware",
                            "Una base de datos",
                            "Una API para manejar datos"
                        ],
                        "answer": "Funciones que tienen acceso al objeto de solicitud, respuesta y al siguiente middleware",
                        "images": "https://example.com/middleware.png",
                        "information": "En Express, middleware son funciones que tienen acceso al objeto de solicitud, respuesta y al siguiente middleware en el ciclo de solicitud/respuesta."
                    },
                    {
                        "ask": "¿Cómo se puede crear una promesa en Node.js?",
                        "options": [
                            "Usando el constructor 'new Promise((resolve, reject) => { ... })'",
                            "Usando 'Promise.create((resolve, reject) => { ... })'",
                            "Usando 'Promise.new((resolve, reject) => { ... })'"
                        ],
                        "answer": "Usando el constructor 'new Promise((resolve, reject) => { ... })'",
                        "images": "https://example.com/new-promise.png",
                        "information": "Para crear una promesa en Node.js, se utiliza el constructor 'new Promise((resolve, reject) => { ... })'."
                    },
                    {
                        "ask": "¿Qué es un callback en Node.js?",
                        "options": [
                            "Una función que se pasa como argumento a otra función",
                            "Una variable global",
                            "Un módulo interno"
                        ],
                        "answer": "Una función que se pasa como argumento a otra función",
                        "images": "https://example.com/callback.png",
                        "information": "En Node.js, un callback es una función que se pasa como argumento a otra función y se ejecuta después de que se complete una operación."
                    },
                    {
                        "ask": "¿Qué hace el método 'JSON.stringify'?",
                        "options": [
                            "Convierte un objeto JavaScript en una cadena JSON",
                            "Convierte una cadena JSON en un objeto JavaScript",
                            "Convierte un archivo en un objeto JavaScript"
                        ],
                        "answer": "Convierte un objeto JavaScript en una cadena JSON",
                        "images": "https://example.com/json-stringify.png",
                        "information": "El método 'JSON.stringify' convierte un objeto JavaScript en una cadena JSON."
                    },
                    {
                        "ask": "¿Cómo se puede importar un módulo en Node.js?",
                        "options": [
                            "Usando 'require('modulo')'",
                            "Usando 'importar('modulo')'",
                            "Usando 'fetch('modulo')'"
                        ],
                        "answer": "Usando 'require('modulo')'",
                        "images": "https://example.com/require.png",
                        "information": "En Node.js, se puede importar un módulo usando 'require('modulo')'."
                    },
                    {
                        "ask": "¿Qué es un módulo en Node.js?",
                        "options": [
                            "Un archivo que contiene código JavaScript que se puede reutilizar",
                            "Una variable global",
                            "Un tipo de dato especial"
                        ],
                        "answer": "Un archivo que contiene código JavaScript que se puede reutilizar",
                        "images": "https://example.com/module.png",
                        "information": "En Node.js, un módulo es un archivo que contiene código JavaScript que se puede reutilizar en otros archivos."
                    },
                    {
                        "ask": "¿Qué es un paquete en Node.js?",
                        "options": [
                            "Una colección de módulos",
                            "Un archivo que contiene código JavaScript",
                            "Un tipo de dato especial"
                        ],
                        "answer": "Una colección de módulos",
                        "images": "https://example.com/package.png",
                        "information": "En Node.js, un paquete es una colección de módulos que se pueden gestionar y distribuir a través de npm."
                    },
                    {
                        "ask": "¿Cómo se puede ejecutar un script en Node.js?",
                        "options": [
                            "Usando el comando 'node script.js'",
                            "Usando el comando 'npm run script'",
                            "Usando el comando 'node execute script.js'"
                        ],
                        "answer": "Usando el comando 'node script.js'",
                        "images": "https://example.com/node-script.png",
                        "information": "Para ejecutar un script en Node.js, se utiliza el comando 'node script.js'."
                    },
                    {
                        "ask": "¿Qué hace el método 'process.exit()'?",
                        "options": [
                            "Finaliza el proceso de Node.js",
                            "Inicia un nuevo proceso de Node.js",
                            "Reinicia el proceso de Node.js"
                        ],
                        "answer": "Finaliza el proceso de Node.js",
                        "images": "https://example.com/process-exit.png",
                        "information": "El método 'process.exit()' finaliza el proceso de Node.js con el código de salida especificado."
                    },
                    {
                        "ask": "¿Cómo se puede crear un servidor HTTPS en Node.js?",
                        "options": [
                            "Usando el módulo 'https'",
                            "Usando el módulo 'http'",
                            "Usando el módulo 'tls'"
                        ],
                        "answer": "Usando el módulo 'https'",
                        "images": "https://example.com/https-server.png",
                        "information": "Para crear un servidor HTTPS en Node.js, se utiliza el módulo 'https', que proporciona funcionalidades para crear y manejar servidores seguros."
                    },
                    {
                        "ask": "¿Qué hace el método 'fs.mkdir'?",
                        "options": [
                            "Crea un nuevo directorio",
                            "Elimina un directorio",
                            "Lee el contenido de un directorio"
                        ],
                        "answer": "Crea un nuevo directorio",
                        "images": "https://example.com/mkdir.png",
                        "information": "El método 'fs.mkdir' en Node.js se utiliza para crear un nuevo directorio."
                    },
                    {
                        "ask": "¿Cómo se puede manejar errores en Node.js?",
                        "options": [
                            "Usando bloques 'try...catch'",
                            "Usando 'console.log()'",
                            "Usando 'alert()'"
                        ],
                        "answer": "Usando bloques 'try...catch'",
                        "images": "https://example.com/try-catch.png",
                        "information": "En Node.js, se pueden manejar errores usando bloques 'try...catch' para capturar y gestionar excepciones."
                    },
                    {
                        "ask": "¿Qué hace el método 'fs.readFile'?",
                        "options": [
                            "Lee el contenido de un archivo",
                            "Escribe datos en un archivo",
                            "Elimina un archivo"
                        ],
                        "answer": "Lee el contenido de un archivo",
                        "images": "https://example.com/readFile.png",
                        "information": "El método 'fs.readFile' en Node.js se utiliza para leer el contenido de un archivo de forma asíncrona."
                    },
                    {
                        "ask": "¿Cómo se puede crear una aplicación Express?",
                        "options": [
                            "Usando 'const app = express()'",
                            "Usando 'const app = createExpressApp()'",
                            "Usando 'const app = new ExpressApp()'"
                        ],
                        "answer": "Usando 'const app = express()'",
                        "images": "https://example.com/express-app.png",
                        "information": "Para crear una aplicación Express, se utiliza 'const app = express()' después de importar el módulo Express."
                    },
                    {
                        "ask": "¿Qué es npm en Node.js?",
                        "options": [
                            "Un gestor de paquetes para Node.js",
                            "Una base de datos",
                            "Un servidor web"
                        ],
                        "answer": "Un gestor de paquetes para Node.js",
                        "images": "https://example.com/npm.png",
                        "information": "npm es un gestor de paquetes para Node.js que se utiliza para instalar, compartir y gestionar dependencias de proyectos."
                    },
                    {
                        "ask": "¿Cómo se puede definir una ruta en Express?",
                        "options": [
                            "Usando 'app.get('/ruta', callback)'",
                            "Usando 'app.route('/ruta')'",
                            "Usando 'app.path('/ruta')'"
                        ],
                        "answer": "Usando 'app.get('/ruta', callback)'",
                        "images": "https://example.com/express-route.png",
                        "information": "Para definir una ruta en Express, se utiliza 'app.get('/ruta', callback)' para manejar solicitudes GET en la ruta especificada."
                    },
                    {
                        "ask": "¿Qué hace el método 'os.cpus()'?",
                        "options": [
                            "Devuelve información sobre las CPUs del sistema",
                            "Devuelve información sobre la memoria del sistema",
                            "Devuelve información sobre los discos del sistema"
                        ],
                        "answer": "Devuelve información sobre las CPUs del sistema",
                        "images": "https://example.com/os-cpus.png",
                        "information": "El método 'os.cpus()' en Node.js devuelve información detallada sobre cada CPU en el sistema."
                    },
                    {
                        "ask": "¿Cómo se puede ejecutar un comando del sistema en Node.js?",
                        "options": [
                            "Usando 'child_process.exec'",
                            "Usando 'system.exec'",
                            "Usando 'os.exec'"
                        ],
                        "answer": "Usando 'child_process.exec'",
                        "images": "https://example.com/child-process.png",
                        "information": "Para ejecutar un comando del sistema en Node.js, se utiliza el método 'child_process.exec' del módulo 'child_process'."
                    },
                    {
                        "ask": "¿Qué hace el método 'process.env'?",
                        "options": [
                            "Accede a las variables de entorno",
                            "Crea un nuevo proceso",
                            "Finaliza un proceso"
                        ],
                        "answer": "Accede a las variables de entorno",
                        "images": "https://example.com/process-env.png",
                        "information": "El método 'process.env' en Node.js se utiliza para acceder a las variables de entorno del sistema."
                    },
                    {
                        "ask": "¿Cómo se puede escribir datos en un archivo en Node.js?",
                        "options": [
                            "Usando el método 'fs.writeFile'",
                            "Usando el método 'fs.readFile'",
                            "Usando el método 'fs.deleteFile'"
                        ],
                        "answer": "Usando el método 'fs.writeFile'",
                        "images": "https://example.com/writeFile.png",
                        "information": "Para escribir datos en un archivo en Node.js, se utiliza el método 'fs.writeFile'."
                    },
                    {
                        "ask": "¿Qué es un buffer en Node.js?",
                        "options": [
                            "Una región de memoria que almacena datos de manera temporal",
                            "Una función especial",
                            "Un archivo temporal"
                        ],
                        "answer": "Una región de memoria que almacena datos de manera temporal",
                        "images": "https://example.com/buffer.png",
                        "information": "En Node.js, un buffer es una región de memoria que almacena datos de manera temporal, especialmente útil para manejar flujos de datos."
                    },
                    {
                        "ask": "¿Cómo se puede instalar un paquete en Node.js?",
                        "options": [
                            "Usando 'npm install paquete'",
                            "Usando 'npm create paquete'",
                            "Usando 'npm build paquete'"
                        ],
                        "answer": "Usando 'npm install paquete'",
                        "images": "https://example.com/npm-install.png",
                        "information": "Para instalar un paquete en Node.js, se utiliza el comando 'npm install paquete'."
                    },
                    {
                        "ask": "¿Qué hace el método 'http.createServer'?",
                        "options": [
                            "Crea un nuevo servidor HTTP",
                            "Crea un nuevo servidor HTTPS",
                            "Crea una nueva conexión HTTP"
                        ],
                        "answer": "Crea un nuevo servidor HTTP",
                        "images": "https://example.com/http-createServer.png",
                        "information": "El método 'http.createServer' en Node.js se utiliza para crear un nuevo servidor HTTP."
                    },
                    {
                        "ask": "¿Cómo se puede manejar solicitudes POST en Express?",
                        "options": [
                            "Usando 'app.post(ruta, callback)'",
                            "Usando 'app.get(ruta, callback)'",
                            "Usando 'app.put(ruta, callback)'"
                        ],
                        "answer": "Usando 'app.post(ruta, callback)'",
                        "images": "https://example.com/express-post.png",
                        "information": "Para manejar solicitudes POST en Express, se utiliza 'app.post(ruta, callback)'."
                    },
                    {
                        "ask": "¿Qué hace el método 'fs.unlink'?",
                        "options": [
                            "Elimina un archivo",
                            "Crea un nuevo archivo",
                            "Lee el contenido de un archivo"
                        ],
                        "answer": "Elimina un archivo",
                        "images": "https://example.com/unlink.png",
                        "information": "El método 'fs.unlink' en Node.js se utiliza para eliminar un archivo."
                    },
                    {
                        "ask": "¿Qué es 'package.json'?",
                        "options": [
                            "Un archivo que contiene la información y dependencias del proyecto",
                            "Un módulo de Node.js",
                            "Una variable global"
                        ],
                        "answer": "Un archivo que contiene la información y dependencias del proyecto",
                        "images": "https://example.com/package-json.png",
                        "information": "El archivo 'package.json' contiene la información del proyecto, como su nombre, versión y dependencias."
                    },
                    {
                        "ask": "¿Cómo se puede leer la entrada del usuario desde la línea de comandos en Node.js?",
                        "options": [
                            "Usando el módulo 'readline'",
                            "Usando el módulo 'input'",
                            "Usando el módulo 'cli'"
                        ],
                        "answer": "Usando el módulo 'readline'",
                        "images": "https://example.com/readline.png",
                        "information": "Para leer la entrada del usuario desde la línea de comandos en Node.js, se utiliza el módulo 'readline'."
                    },
                    {
                        "ask": "¿Cómo se puede instalar un paquete NPM?",
                        "options": [
                          "Usando 'npm install nombre_paquete'",
                          "Usando 'npm add nombre_paquete'",
                          "Usando 'npm update nombre_paquete'"
                        ],
                        "answer": "Usando 'npm install nombre_paquete' o 'npm add nombre_paquete'",
                        "images": "https://example.com/npm-install.png",
                        "information": "Para instalar un paquete NPM, se utiliza el comando 'npm install' o 'npm add' seguido del nombre del paquete."
                      },
                      {
                        "ask": "¿Cómo se crea un servidor web simple con Node.js?",
                        "options": [
                          "Usando el módulo 'http'",
                          "Usando el módulo 'express'",
                          "Usando el módulo 'fs'"
                        ],
                        "answer": "Usando el módulo 'http' o 'express'",
                        "images": "https://example.com/node-server.png",
                        "information": "Para crear un servidor web simple con Node.js, se puede usar el módulo 'http' o 'express'. El módulo 'http' ofrece funcionalidades básicas, mientras que 'express' proporciona más herramientas y simplifica la creación de aplicaciones web."
                      },
                      {
                        "ask": "¿Qué es el bucle 'for' en Node.js?",
                        "options": [
                          "Un tipo de dato",
                          "Una variable",
                          "Una estructura de control de flujo"
                        ],
                        "answer": "Una estructura de control de flujo",
                        "images": "https://example.com/for-loop.png",
                        "information": "El bucle 'for' en Node.js es una estructura de control de flujo que permite iterar sobre un bloque de código un número determinado de veces o hasta que se cumpla una condición."
                      },
                      {
                        "ask": "¿Cómo se manejan errores en Node.js?",
                        "options": [
                          "Usando 'try...catch'",
                          "Usando 'throw new Error()'",
                          "Usando 'console.error()'"
                        ],
                        "answer": "Usando 'try...catch' y 'throw new Error()'",
                        "images": "https://example.com/error-handling.png",
                        "information": "En Node.js, se utilizan los bloques 'try...catch' para manejar errores. El bloque 'try' contiene el código que podría generar un error, y el bloque 'catch' se ejecuta si se produce un error. El comando 'throw new Error()' se utiliza para generar un error."
                      },
                      {
                        "ask": "¿Qué es el módulo 'fs' en Node.js?",
                        "options": [
                          "Un módulo para manejar archivos y directorios",
                          "Un módulo para crear servidores web",
                          "Un módulo para instalar paquetes NPM"
                        ],
                        "answer": "Un módulo para manejar archivos y directorios",
                        "images": "https://example.com/fs-module.png",
                        "information": "El módulo 'fs' (File System) en Node.js proporciona funciones para leer, escribir, crear, eliminar y modificar archivos y directorios."
                      },
                      {
                        "ask": "¿Cómo se puede instalar un paquete NPM?",
                        "options": [
                          "Usando 'npm update nombre_paquete'",
                          "Usando 'npm add nombre_paquete'",
                          "Usando 'npm install nombre_paquete'"
                        ],
                        "answer": "Usando 'npm install nombre_paquete' o 'npm add nombre_paquete'",
                        "images": "https://example.com/npm-install.png",
                        "information": "Para instalar un paquete NPM, se utiliza el comando 'npm install' o 'npm add' seguido del nombre del paquete."
                      },
                      {
                        "ask": "¿Cómo se crea un servidor web simple con Node.js?",
                        "options": [
                          "Usando el módulo 'express'",
                          "Usando el módulo 'fs'",
                          "Usando el módulo 'http'"
                        ],
                        "answer": "Usando el módulo 'http' o 'express'",
                        "images": "https://example.com/node-server.png",
                        "information": "Para crear un servidor web simple con Node.js, se puede usar el módulo 'http' o 'express'. El módulo 'http' ofrece funcionalidades básicas, mientras que 'express' proporciona más herramientas y simplifica la creación de aplicaciones web."
                      },
                      {
                        "ask": "¿Qué es el bucle 'for' en Node.js?",
                        "options": [
                          "Una estructura de control de flujo",
                          "Un tipo de dato",
                          "Una variable"
                        ],
                        "answer": "Una estructura de control de flujo",
                        "images": "https://example.com/for-loop.png",
                        "information": "El bucle 'for' en Node.js es una estructura de control de flujo que permite iterar sobre un bloque de código un número determinado de veces o hasta que se cumpla una condición."
                      },
                      {
                        "ask": "¿Cómo se manejan errores en Node.js?",
                        "options": [
                          "Usando 'console.error()'",
                          "Usando 'throw new Error()'",
                          "Usando 'try...catch'"
                        ],
                        "answer": "Usando 'try...catch' y 'throw new Error()'",
                        "images": "https://example.com/error-handling.png",
                        "information": "En Node.js, se utilizan los bloques 'try...catch' para manejar errores. El bloque 'try' contiene el código que podría generar un error, y el bloque 'catch' se ejecuta si se produce un error. El comando 'throw new Error()' se utiliza para generar un error."
                      },
                      {
                        "ask": "¿Qué es el módulo 'fs' en Node.js?",
                        "options": [
                          "Un módulo para instalar paquetes NPM",
                          "Un módulo para manejar archivos y directorios",
                          "Un módulo para crear servidores web"
                        ],
                        "answer": "Un módulo para manejar archivos y directorios",
                        "images": "https://example.com/fs-module.png",
                        "information": "El módulo 'fs' (File System) en Node.js proporciona funciones para leer, escribir, crear, eliminar y modificar archivos y directorios."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.readFile'?",
                        "options": [
                          "Elimina un archivo",
                          "Crea un nuevo archivo",
                          "Lee el contenido de un archivo"
                        ],
                        "answer": "Lee el contenido de un archivo",
                        "images": "https://example.com/fs-readfile.png",
                        "information": "El método 'fs.readFile' en Node.js se utiliza para leer el contenido de un archivo y devolverlo como una cadena o un búfer."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.writeFile'?",
                        "options": [
                          "Elimina un archivo",
                          "Lee el contenido de un archivo",
                          "Crea o sobrescribe un archivo"
                        ],
                        "answer": "Crea o sobrescribe un archivo",
                        "images": "https://example.com/fs-writeFile.png",
                        "information": "El método 'fs.writeFile' en Node.js se utiliza para crear o sobrescribir un archivo con el contenido especificado."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.appendFile'?",
                        "options": [
                          "Crea un nuevo archivo",
                          "Elimina un archivo",
                          "Agrega contenido al final de un archivo existente"
                        ],
                        "answer": "Agrega contenido al final de un archivo existente",
                        "images": "https://example.com/fs-appendFile.png",
                        "information": "El método 'fs.appendFile' en Node.js se utiliza para agregar contenido al final de un archivo existente sin sobrescribir su contenido anterior."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.unlink'?",
                        "options": [
                          "Crea un nuevo archivo",
                          "Elimina un archivo",
                          "Lee el contenido de un archivo"
                        ],
                        "answer": "Elimina un archivo",
                        "images": "https://example.com/unlink.png",
                        "information": "El método 'fs.unlink' en Node.js se utiliza para eliminar un archivo del sistema de archivos."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.rmdir'?",
                        "options": [
                          "Crea un nuevo directorio",
                          "Elimina un directorio vacío",
                          "Lee el contenido de un directorio"
                        ],
                        "answer": "Elimina un directorio vacío",
                        "images": "https://example.com/fs-rmdir.png",
                        "information": "El método 'fs.rmdir' en Node.js se utiliza para eliminar un directorio vacío del sistema de archivos."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.mkdir'?",
                        "options": [
                          "Elimina un directorio",
                          "Crea un nuevo directorio",
                          "Lee el contenido de un directorio"
                        ],
                        "answer": "Crea un nuevo directorio",
                        "images": "https://example.com/fs-mkdir.png",
                        "information": "El método 'fs.mkdir' en Node.js se utiliza para crear un nuevo directorio en el sistema de archivos."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.readdir'?",
                        "options": [
                          "Crea un nuevo directorio",
                          "Elimina un directorio",
                          "Lee una lista de archivos y directorios dentro de un directorio"
                        ],
                        "answer": "Lee una lista de archivos y directorios dentro de un directorio",
                        "images": "https://example.com/fs-readdir.png",
                        "information": "El método 'fs.readdir' en Node.js se utiliza para obtener una lista de archivos y directorios dentro de un directorio especificado."
                      },
                      {
                        "ask": "¿Qué es el módulo 'path' en Node.js?",
                        "options": [
                          "Un módulo para manejar rutas de archivo",
                          "Un módulo para crear servidores web",
                          "Un módulo para instalar paquetes NPM"
                        ],
                        "answer": "Un módulo para manejar rutas de archivo",
                        "images": "https://example.com/path-module.png",
                        "information": "El módulo 'path' en Node.js proporciona funciones para trabajar con rutas de archivo, como unir rutas, obtener la extensión de un archivo, verificar si un archivo existe, etc."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.readdirSync'?",
                        "options": [
                          "Crea un nuevo directorio",
                          "Elimina un directorio",
                          "Lee una lista de archivos y directorios dentro de un directorio de forma síncrona"
                        ],
                        "answer": "Lee una lista de archivos y directorios dentro de un directorio de forma síncrona",
                        "images": "https://example.com/fs-readdirSync.png",
                        "information": "El método 'fs.readdirSync' en Node.js se utiliza para obtener una lista de archivos y directorios dentro de un directorio especificado de forma síncrona, bloqueando el hilo de ejecución hasta que se complete la operación."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.writeFileSync'?",
                        "options": [
                          "Elimina un archivo",
                          "Crea o sobrescribe un archivo de forma síncrona",
                          "Lee el contenido de un archivo"
                        ],
                        "answer": "Crea o sobrescribe un archivo de forma síncrona",
                        "images": "https://example.com/fs-writeFileSync.png",
                        "information": "El método 'fs.writeFileSync' en Node.js se utiliza para crear o sobrescribir un archivo con el contenido especificado de forma síncrona, bloqueando el hilo de ejecución hasta que se complete la operación."
                      },
                      {
                        "ask": "¿Qué hace el método 'fs.mkdirSync'?",
                        "options": [
                          "Elimina un directorio",
                          "Crea un nuevo directorio de forma síncrona",
                          "Lee el contenido de un directorio"
                        ],
                        "answer": "Crea un nuevo directorio de forma síncrona",
                        "images": "https://example.com/fs-mkdirSync.png",
                        "information": "El método 'fs.mkdirSync' en Node.js se utiliza para crear un nuevo directorio en el sistema de archivos de forma síncrona, bloqueando el hilo de ejecución hasta que se complete la operación."
                      },
                      {
                        "ask": "¿Qué es el evento 'error' en Node.js?",
                        "options": [
                          "Se emite cuando se produce un error en una operación de E/S",
                          "Se emite cuando se completa una operación de E/S con éxito",
                          "Se emite cuando se recibe una solicitud HTTP"
                        ],
                        "answer": "Se emite cuando se produce un error en una operación de E/S",
                        "images": "https://example.com/error-event.png",
                        "information": "El evento 'error' en Node.js se emite cuando se produce un error durante una operación de entrada/salida (E/S), como leer un archivo, escribir en un archivo o crear un socket. Este evento permite manejar los errores de forma adecuada."
                      },
                      {
                        "ask": "¿Qué es el objeto 'global' en Node.js?",
                        "options": [
                          "Un objeto que contiene variables globales accesibles desde cualquier parte del código",
                          "Un módulo que proporciona funciones para trabajar con el sistema de archivos",
                          "Un framework para crear servidores web"
                        ],
                        "answer": "Un objeto que contiene variables globales accesibles desde cualquier parte del código",
                        "images": "https://example.com/global-object.png",
                        "information": "El objeto 'global' en Node.js proporciona un espacio de nombres global donde se pueden declarar variables que estarán disponibles desde cualquier parte del código de la aplicación. Sin embargo, se recomienda evitar su uso excesivo y utilizar módulos para organizar el código de manera más eficiente."
                      },
                      {
                        "ask": "¿Qué es el módulo 'process' en Node.js?",
                        "options": [
                          "Un módulo que proporciona información sobre el proceso actual de Node.js",
                          "Un módulo para crear servidores web",
                          "Un framework para trabajar con archivos y directorios"
                        ],
                        "answer": "Un módulo que proporciona información sobre el proceso actual de Node.js",
                        "images": "https://example.com/process-module.png",
                        "information": "El módulo 'process' en Node.js proporciona información sobre el proceso actual de Node.js, como el pid (identificador de proceso), la memoria utilizada, las variables de entorno y las señales recibidas. También permite salir del proceso o enviar señales a otros procesos."
                      }
                    
                ],
                "middel": [
                    {
                        "ask": "¿Cómo se pueden utilizar módulos externos en Node.js?",
                        "options": [
                          "Usando 'require()' para importar el módulo",
                          "Instalando el módulo con 'npm install' y luego importándolo con 'require()'",
                          "Ambas opciones son válidas"
                        ],
                        "answer": "Ambas opciones son válidas",
                        "images": "https://example.com/node-modules.png",
                        "information": "En Node.js, se pueden utilizar módulos externos para ampliar las funcionalidades de las aplicaciones. Para hacerlo, se puede usar el comando 'require()' para importar el módulo, ya sea directamente desde el archivo o después de instalarlo con 'npm install'."
                      },
                      {
                        "ask": "¿Qué es el patrón 'MVC' en Node.js?",
                        "options": [
                          "Un patrón de arquitectura para organizar el código de aplicaciones web",
                          "Un módulo para crear servidores web",
                          "Un framework para trabajar con archivos y directorios"
                        ],
                        "answer": "Un patrón de arquitectura para organizar el código de aplicaciones web",
                        "images": "https://example.com/mvc-pattern.png",
                        "information": "El patrón 'MVC' (Modelo-Vista-Controlador) es un patrón de arquitectura de software que se utiliza para organizar el código de aplicaciones web. Separa la lógica de negocio (Modelo), la interfaz de usuario (Vista) y la lógica de control (Controlador) en capas independientes, lo que facilita el mantenimiento y la reutilización del código."
                      },
                      {
                        "ask": "¿Qué es el módulo 'express-validator' en Node.js?",
                        "options": [
                          "Un módulo para validar datos de entrada en formularios web",
                          "Un módulo para crear servidores web",
                          "Un framework para trabajar con archivos y directorios"
                        ],
                        "answer": "Un módulo para validar datos de entrada en formularios web",
                        "images": "https://example.com/express-validator.png",
                        "information": "El módulo 'express-validator' en Node.js proporciona funciones para validar datos de entrada en formularios web, como verificar que los campos no estén vacíos, que sean del tipo correcto y que cumplan con ciertas reglas personalizadas."
                      },
                      {
                        "ask": "¿Cómo se pueden manejar las sesiones de usuario en Node.js?",
                        "options": [
                          "Usando módulos como 'express-session' o 'connect-session'",
                          "Guardando la información de sesión en el objeto 'req' de las solicitudes HTTP",
                          "Ambas opciones son válidas"
                        ],
                        "answer": "Ambas opciones son válidas",
                        "images": "https://example.com/node-sessions.png",
                        "information": "En Node.js, se pueden manejar las sesiones de usuario utilizando módulos como 'express-session' o 'connect-session'. Estos módulos permiten almacenar y recuperar información sobre la sesión del usuario, como el ID de sesión, el usuario autenticado y los datos asociados a la sesión."
                      },
                      {
                        "ask": "¿Qué son las 'middlewares' en Node.js?",
                        "options": [
                          "Funciones que se ejecutan antes o después de las rutas de una aplicación Express",
                          "Módulos para crear servidores web",
                          "Frameworks para trabajar con archivos y directorios"
                        ],
                        "answer": "Funciones que se ejecutan antes o después de las rutas de una aplicación Express",
                        "images": "https://example.com/express-middleware.png",
                        "information": "Las 'middlewares' en Node.js son funciones que se ejecutan antes o después de las rutas de una aplicación Express. Permiten realizar acciones comunes antes de procesar una solicitud, como autenticar al usuario, registrar la actividad del usuario o validar los datos de entrada."
                      },
                      {
                        "ask": "¿Qué es el módulo 'cluster' en Node.js?",
                        "options": [
                          "Un módulo para crear aplicaciones escalables que aprovechan el multiprocesamiento",
                          "Un módulo para manejar sesiones de usuario",
                          "Un framework para trabajar con archivos y directorios"
                        ],
                        "answer": "Un módulo para crear aplicaciones escalables que aprovechan el multiprocesamiento",
                        "images": "https://example.com/node-cluster.png",
                        "information": "El módulo 'cluster' en Node.js permite crear aplicaciones escalables que aprovechan el multiprocesamiento, ejecutando diferentes partes de la aplicación en diferentes procesos. Esto puede mejorar el rendimiento y la capacidad de respuesta, especialmente en aplicaciones que manejan muchas conexiones o tareas de larga duración."
                      },
                      {
                        "ask": "¿Qué son los 'streams' en Node.js?",
                        "options": [
                          "Flujos de datos que permiten procesar datos de forma fragmentada",
                          "Módulos para crear servidores web",
                          "Frameworks para trabajar con archivos y directorios"
                        ],
                        "answer": "Flujos de datos que permiten procesar datos de forma fragmentada",
                        "images": "https://example.com/node-streams.png",
                        "information": "Los 'streams' en Node.js son flujos de datos que permiten procesar datos de forma fragmentada, en lugar de cargar todo el contenido a la vez en memoria. Esto es útil para manejar grandes cantidades de datos, como archivos grandes o transmisiones de vídeo, sin necesidad de consumir mucha memoria."
                      },
                      {
                        "ask": "¿Cómo se pueden utilizar las 'promesas' en Node.js?",
                        "options": [
                          "Para manejar operaciones asincrónicas y obtener el resultado en el futuro",
                          "Para validar datos de entrada en formularios web",
                          "Para crear aplicaciones escalables que aprovechan el multiprocesamiento"
                        ],
                        "answer": "Para manejar operaciones asincrónicas y obtener el resultado en el futuro",
                        "images": "https://example.com/node-promises.png",
                        "information": "Las 'promesas' en Node.js son una forma de manejar operaciones asincrónicas, como leer un archivo, realizar una petición a una API o ejecutar una tarea que lleva tiempo. Permiten escribir código más limpio y estructurado, y evitar los callbacks anidados."
                      },
                      {
                        "ask": "¿Qué es el módulo 'async/await' en Node.js?",
                        "options": [
                          "Una sintaxis alternativa para trabajar con 'promesas' de forma más legible",
                          "Un módulo para manejar sesiones de usuario",
                          "Un framework para trabajar con archivos y directorios"
                        ],
                        "answer": "Una sintaxis alternativa para trabajar con 'promesas' de forma más legible",
                        "images": "https://example.com/async-await.png",
                        "information": "El módulo 'async/await' en Node.js proporciona una sintaxis alternativa para trabajar con 'promesas' de forma más legible y similar al código síncrono. Permite escribir código más claro y fácil de entender, especialmente cuando se encadenan varias operaciones asincrónicas."
                      },
                      {
                        "ask": "¿Qué es el patrón 'Pub/Sub' en Node.js?",
                        "options": [
                          "Un patrón de diseño para comunicar componentes de una aplicación mediante mensajes",
                          "Un módulo para crear servidores web",
                          "Un framework para trabajar con archivos y directorios"
                        ],
                        "answer": "Un patrón de diseño para comunicar componentes de una aplicación mediante mensajes",
                        "images": "https://example.com/node-pubsub.png",
                        "information": "El patrón 'Pub/Sub' (Publicación/Suscripción) en Node.js es un patrón de diseño que permite a los componentes de una aplicación comunicarse entre sí mediante mensajes. Un componente publica un mensaje y los componentes interesados se suscriben para recibirlo. Esto permite una comunicación desacoplada y escalable entre componentes."
                      },
                      {
                        "ask": "¿Cómo se pueden implementar APIs RESTful en Node.js?",
                        "options": [
                          "Usando frameworks como 'Express' o 'Hapi' junto con el módulo 'restify'",
                          "Utilizando el módulo 'http' y escribiendo código manualmente para manejar las solicitudes y respuestas",
                          "Ambas opciones son válidas"
                        ],
                        "answer": "Ambas opciones son válidas",
                        "images": "https://example.com/node-restful-apis.png",
                        "information": "En Node.js, se pueden implementar APIs RESTful utilizando frameworks como 'Express' o 'Hapi', que facilitan la creación de rutas, la gestión de métodos HTTP (GET, POST, PUT, DELETE) y el envío de respuestas en formato JSON. También se puede utilizar el módulo 'http' y escribir código manualmente para manejar las solicitudes y respuestas, pero esto requiere más trabajo de desarrollo."
                      },
                      {
                        "ask": "¿Qué es el módulo 'mongoose' en Node.js?",
                        "options": [
                          "Un ODM (Object Document Mapper) para trabajar con bases de datos NoSQL como MongoDB",
                          "Un módulo para crear servidores web",
                          "Un framework para trabajar con archivos y directorios"
                        ],
                        "answer": "Un ODM (Object Document Mapper) para trabajar con bases de datos NoSQL como MongoDB",
                        "images": "https://example.com/node-mongoose.png",
                        "information": "El módulo 'mongoose' en Node.js es un ODM (Object Document Mapper) que permite trabajar con bases de datos NoSQL como MongoDB de forma orientada a objetos. Facilita la creación, lectura, actualización y eliminación de datos en la base de datos, mapeando los objetos de JavaScript a documentos de MongoDB."
                      },
                      {
                        "ask": "¿Qué es el módulo 'socket.io' en Node.js?",
                        "options": [
                          "Una biblioteca para crear aplicaciones de chat en tiempo real y aplicaciones web colaborativas",
                          "Un módulo para manejar sesiones de usuario",
                          "Un framework para trabajar con archivos y directorios"
                        ],
                        "answer": "Una biblioteca para crear aplicaciones de chat en tiempo real y aplicaciones web colaborativas",
                        "images": "https://example.com/node-socket-io.png",
                        "information": "El módulo 'socket.io' en Node.js es una biblioteca para crear aplicaciones de chat en tiempo real y aplicaciones web colaborativas. Permite establecer conexiones bidireccionales y persistentes entre un servidor y varios clientes, posibilitando la comunicación en tiempo real y la sincronización de datos entre usuarios."
                      },
                      {
                        "ask": "¿Cómo se pueden implementar sistemas de autenticación y autorización en Node.js?",
                        "options": [
                          "Usando módulos como 'passport' o 'jsonwebtoken'",
                          "Escribiendo código manualmente para verificar usuarios y contraseñas",
                          "Ambas opciones son válidas"
                        ],
                        "answer": "Ambas opciones son válidas",
                        "images": "https://example.com/node-authentication.png",
                        "information": "En Node.js, se pueden implementar sistemas de autenticación y autorización utilizando módulos como 'passport' o 'jsonwebtoken'. Estos módulos facilitan la gestión de usuarios, contraseñas, tokens de autenticación y control de acceso a diferentes recursos de la aplicación. También se puede escribir código manualmente para verificar usuarios y contraseñas, pero esto requiere más trabajo de desarrollo."
                      },
                      {
                        "ask": "¿Qué son las 'variables de entorno' en Node.js?",
                        "options": [
                          "Variables que se definen en el entorno de ejecución de Node.js y se pueden utilizar en la aplicación",
                          "Módulos para crear servidores web",
                          "Frameworks para trabajar con archivos y directorios"
                        ],
                        "answer": "Variables que se definen en el entorno de ejecución de Node.js y se pueden utilizar en la aplicación",
                        "images": "https://example.com/node-environment-variables.png",
                        "information": "Las 'variables de entorno' en Node.js son variables que se definen en el entorno de ejecución y se pueden utilizar en la aplicación para almacenar configuraciones, rutas de archivos, claves de API o cualquier otra información que se necesite durante la ejecución. Se pueden acceder a ellas mediante el objeto 'process.env'."
                      }
                ],
                "expert": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "god": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ]
            }
        },
        {
            "next": {
                "basic": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "middel": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "expert": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "god": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ]
            }
        },
        {
            "sequelize": {
                "basic": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "middel": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "expert": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "god": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ]
            }
        },
        {
            "sql": {
                "basic": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "middel": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "expert": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "god": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ]
            }
        },
        {
            "html": {
                "basic": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "middel": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "expert": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "god": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ]
            }
        },
        {
            "typescript": {
                "basic": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "middel": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "expert": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "god": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ]
            }
        },
        {
            "graphql": {
                "basic": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "middel": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "expert": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ],
                "god": [
                    {
                        "ask": {},
                        "options": {},
                        "answer": {},
                        "images": {},
                        "information": {}
                    }
                ]
            }
        }
    ]
}